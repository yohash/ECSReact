// <auto-generated>
// This file was automatically generated by Store Extensions Generator
// Do not modify this file directly - it will be overwritten
// </auto-generated>

using System;
using Unity.Entities;
using Unity.Mathematics;
using Unity.Collections;
using ECSReact.Core;

namespace ECSReact.Samples.BattleSystem
{
  /// <summary>
  /// Generated extension methods for Store that provide typed action dispatch methods.
  /// These methods eliminate boilerplate and provide IntelliSense support for action parameters.
  /// </summary>
  public static class StoreExtensions
  {
    /// <summary>
    /// Dispatch a AddCharacterAction to the ECS world.
    /// </summary>
    /// <param name="name">The name value for the action.</param>
    /// <param name="maxHealth">The maxHealth value for the action.</param>
    /// <param name="maxMana">The maxMana value for the action.</param>
    /// <param name="isEnemy">The isEnemy value for the action.</param>
    /// <param name="initialStatus">The initialStatus value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool AddCharacter(this Store store, FixedString32Bytes name, int maxHealth, int maxMana, bool isEnemy, CharacterStatus initialStatus)
    {
      if (store == null)
      {
        UnityEngine.Debug.LogError("Store instance is null when dispatching AddCharacterAction");
        return false;
      }

      var action = new AddCharacterAction
      {
        name = name,
        maxHealth = maxHealth,
        maxMana = maxMana,
        isEnemy = isEnemy,
        initialStatus = initialStatus,
      };

      store.Dispatch(action);
      return true;
    }

    /// <summary>
    /// Dispatch a AddCharacterAction using the Store singleton instance.
    /// </summary>
    /// <param name="name">The name value for the action.</param>
    /// <param name="maxHealth">The maxHealth value for the action.</param>
    /// <param name="maxMana">The maxMana value for the action.</param>
    /// <param name="isEnemy">The isEnemy value for the action.</param>
    /// <param name="initialStatus">The initialStatus value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool AddCharacter(FixedString32Bytes name, int maxHealth, int maxMana, bool isEnemy, CharacterStatus initialStatus)
    {
      if (Store.Instance == null)
      {
        UnityEngine.Debug.LogError("Store.Instance is null when dispatching AddCharacterAction");
        return false;
      }

      return Store.Instance.AddCharacter(name, maxHealth, maxMana, isEnemy, initialStatus);
    }

    /// <summary>
    /// Dispatch a ApplyDamageAction to the ECS world.
    /// </summary>
    /// <param name="targetEntity">The targetEntity value for the action.</param>
    /// <param name="finalDamage">The finalDamage value for the action.</param>
    /// <param name="wasDefending">The wasDefending value for the action.</param>
    /// <param name="isTargetEnemy">The isTargetEnemy value for the action.</param>
    /// <param name="wasCritical">The wasCritical value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool ApplyDamage(this Store store, Entity targetEntity, int finalDamage, bool wasDefending, bool isTargetEnemy, bool wasCritical)
    {
      if (store == null)
      {
        UnityEngine.Debug.LogError("Store instance is null when dispatching ApplyDamageAction");
        return false;
      }

      var action = new ApplyDamageAction
      {
        targetEntity = targetEntity,
        finalDamage = finalDamage,
        wasDefending = wasDefending,
        isTargetEnemy = isTargetEnemy,
        wasCritical = wasCritical,
      };

      store.Dispatch(action);
      return true;
    }

    /// <summary>
    /// Dispatch a ApplyDamageAction using the Store singleton instance.
    /// </summary>
    /// <param name="targetEntity">The targetEntity value for the action.</param>
    /// <param name="finalDamage">The finalDamage value for the action.</param>
    /// <param name="wasDefending">The wasDefending value for the action.</param>
    /// <param name="isTargetEnemy">The isTargetEnemy value for the action.</param>
    /// <param name="wasCritical">The wasCritical value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool ApplyDamage(Entity targetEntity, int finalDamage, bool wasDefending, bool isTargetEnemy, bool wasCritical)
    {
      if (Store.Instance == null)
      {
        UnityEngine.Debug.LogError("Store.Instance is null when dispatching ApplyDamageAction");
        return false;
      }

      return Store.Instance.ApplyDamage(targetEntity, finalDamage, wasDefending, isTargetEnemy, wasCritical);
    }

    /// <summary>
    /// Dispatch a AttackAction to the ECS world.
    /// </summary>
    /// <param name="attackerEntity">The attackerEntity value for the action.</param>
    /// <param name="targetEntity">The targetEntity value for the action.</param>
    /// <param name="baseDamage">The baseDamage value for the action.</param>
    /// <param name="isCritical">The isCritical value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool Attack(this Store store, Entity attackerEntity, Entity targetEntity, int baseDamage, bool isCritical)
    {
      if (store == null)
      {
        UnityEngine.Debug.LogError("Store instance is null when dispatching AttackAction");
        return false;
      }

      var action = new AttackAction
      {
        attackerEntity = attackerEntity,
        targetEntity = targetEntity,
        baseDamage = baseDamage,
        isCritical = isCritical,
      };

      store.Dispatch(action);
      return true;
    }

    /// <summary>
    /// Dispatch a AttackAction using the Store singleton instance.
    /// </summary>
    /// <param name="attackerEntity">The attackerEntity value for the action.</param>
    /// <param name="targetEntity">The targetEntity value for the action.</param>
    /// <param name="baseDamage">The baseDamage value for the action.</param>
    /// <param name="isCritical">The isCritical value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool Attack(Entity attackerEntity, Entity targetEntity, int baseDamage, bool isCritical)
    {
      if (Store.Instance == null)
      {
        UnityEngine.Debug.LogError("Store.Instance is null when dispatching AttackAction");
        return false;
      }

      return Store.Instance.Attack(attackerEntity, targetEntity, baseDamage, isCritical);
    }

    /// <summary>
    /// Dispatch a CharacterCreatedAction to the ECS world.
    /// </summary>
    /// <param name="entity">The entity value for the action.</param>
    /// <param name="name">The name value for the action.</param>
    /// <param name="maxHealth">The maxHealth value for the action.</param>
    /// <param name="maxMana">The maxMana value for the action.</param>
    /// <param name="isEnemy">The isEnemy value for the action.</param>
    /// <param name="initialStatus">The initialStatus value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool CharacterCreated(this Store store, Entity entity, FixedString32Bytes name, int maxHealth, int maxMana, bool isEnemy, CharacterStatus initialStatus)
    {
      if (store == null)
      {
        UnityEngine.Debug.LogError("Store instance is null when dispatching CharacterCreatedAction");
        return false;
      }

      var action = new CharacterCreatedAction
      {
        entity = entity,
        name = name,
        maxHealth = maxHealth,
        maxMana = maxMana,
        isEnemy = isEnemy,
        initialStatus = initialStatus,
      };

      store.Dispatch(action);
      return true;
    }

    /// <summary>
    /// Dispatch a CharacterCreatedAction using the Store singleton instance.
    /// </summary>
    /// <param name="entity">The entity value for the action.</param>
    /// <param name="name">The name value for the action.</param>
    /// <param name="maxHealth">The maxHealth value for the action.</param>
    /// <param name="maxMana">The maxMana value for the action.</param>
    /// <param name="isEnemy">The isEnemy value for the action.</param>
    /// <param name="initialStatus">The initialStatus value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool CharacterCreated(Entity entity, FixedString32Bytes name, int maxHealth, int maxMana, bool isEnemy, CharacterStatus initialStatus)
    {
      if (Store.Instance == null)
      {
        UnityEngine.Debug.LogError("Store.Instance is null when dispatching CharacterCreatedAction");
        return false;
      }

      return Store.Instance.CharacterCreated(entity, name, maxHealth, maxMana, isEnemy, initialStatus);
    }

    /// <summary>
    /// Dispatch a InitializeTurnOrderAction to the ECS world.
    /// </summary>
    /// <param name="turnOrder">The turnOrder value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool InitializeTurnOrder(this Store store, FixedList128Bytes<Entity> turnOrder)
    {
      if (store == null)
      {
        UnityEngine.Debug.LogError("Store instance is null when dispatching InitializeTurnOrderAction");
        return false;
      }

      var action = new InitializeTurnOrderAction
      {
        turnOrder = turnOrder,
      };

      store.Dispatch(action);
      return true;
    }

    /// <summary>
    /// Dispatch a InitializeTurnOrderAction using the Store singleton instance.
    /// </summary>
    /// <param name="turnOrder">The turnOrder value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool InitializeTurnOrder(FixedList128Bytes<Entity> turnOrder)
    {
      if (Store.Instance == null)
      {
        UnityEngine.Debug.LogError("Store.Instance is null when dispatching InitializeTurnOrderAction");
        return false;
      }

      return Store.Instance.InitializeTurnOrder(turnOrder);
    }

    /// <summary>
    /// Dispatch a NextTurnAction to the ECS world.
    /// </summary>
    /// <param name="skipAnimation">The skipAnimation value for the action.</param>
    /// <param name="isPlayerTurn">The isPlayerTurn value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool NextTurn(this Store store, bool skipAnimation, bool isPlayerTurn)
    {
      if (store == null)
      {
        UnityEngine.Debug.LogError("Store instance is null when dispatching NextTurnAction");
        return false;
      }

      var action = new NextTurnAction
      {
        skipAnimation = skipAnimation,
        isPlayerTurn = isPlayerTurn,
      };

      store.Dispatch(action);
      return true;
    }

    /// <summary>
    /// Dispatch a NextTurnAction using the Store singleton instance.
    /// </summary>
    /// <param name="skipAnimation">The skipAnimation value for the action.</param>
    /// <param name="isPlayerTurn">The isPlayerTurn value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool NextTurn(bool skipAnimation, bool isPlayerTurn)
    {
      if (Store.Instance == null)
      {
        UnityEngine.Debug.LogError("Store.Instance is null when dispatching NextTurnAction");
        return false;
      }

      return Store.Instance.NextTurn(skipAnimation, isPlayerTurn);
    }

    /// <summary>
    /// Dispatch a SelectActionTypeAction to the ECS world.
    /// </summary>
    /// <param name="actionType">The actionType value for the action.</param>
    /// <param name="actingCharacter">The actingCharacter value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool SelectActionType(this Store store, ActionType actionType, Entity actingCharacter)
    {
      if (store == null)
      {
        UnityEngine.Debug.LogError("Store instance is null when dispatching SelectActionTypeAction");
        return false;
      }

      var action = new SelectActionTypeAction
      {
        actionType = actionType,
        actingCharacter = actingCharacter,
      };

      store.Dispatch(action);
      return true;
    }

    /// <summary>
    /// Dispatch a SelectActionTypeAction using the Store singleton instance.
    /// </summary>
    /// <param name="actionType">The actionType value for the action.</param>
    /// <param name="actingCharacter">The actingCharacter value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool SelectActionType(ActionType actionType, Entity actingCharacter)
    {
      if (Store.Instance == null)
      {
        UnityEngine.Debug.LogError("Store.Instance is null when dispatching SelectActionTypeAction");
        return false;
      }

      return Store.Instance.SelectActionType(actionType, actingCharacter);
    }

    /// <summary>
    /// Dispatch a SelectTargetAction to the ECS world.
    /// </summary>
    /// <param name="targetEntity">The targetEntity value for the action.</param>
    /// <param name="confirmSelection">The confirmSelection value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool SelectTarget(this Store store, Entity targetEntity, bool confirmSelection)
    {
      if (store == null)
      {
        UnityEngine.Debug.LogError("Store instance is null when dispatching SelectTargetAction");
        return false;
      }

      var action = new SelectTargetAction
      {
        targetEntity = targetEntity,
        confirmSelection = confirmSelection,
      };

      store.Dispatch(action);
      return true;
    }

    /// <summary>
    /// Dispatch a SelectTargetAction using the Store singleton instance.
    /// </summary>
    /// <param name="targetEntity">The targetEntity value for the action.</param>
    /// <param name="confirmSelection">The confirmSelection value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool SelectTarget(Entity targetEntity, bool confirmSelection)
    {
      if (Store.Instance == null)
      {
        UnityEngine.Debug.LogError("Store.Instance is null when dispatching SelectTargetAction");
        return false;
      }

      return Store.Instance.SelectTarget(targetEntity, confirmSelection);
    }

    /// <summary>
    /// Dispatch a SaveBattleAction to the ECS world.
    /// </summary>
    /// <param name="fileName">The fileName value for the action.</param>
    /// <param name="format">The format value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool SaveBattle(this Store store, FixedString128Bytes fileName, SaveFormat format)
    {
      if (store == null)
      {
        UnityEngine.Debug.LogError("Store instance is null when dispatching SaveBattleAction");
        return false;
      }

      var action = new SaveBattleAction
      {
        fileName = fileName,
        format = format,
      };

      store.Dispatch(action);
      return true;
    }

    /// <summary>
    /// Dispatch a SaveBattleAction using the Store singleton instance.
    /// </summary>
    /// <param name="fileName">The fileName value for the action.</param>
    /// <param name="format">The format value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool SaveBattle(FixedString128Bytes fileName, SaveFormat format)
    {
      if (Store.Instance == null)
      {
        UnityEngine.Debug.LogError("Store.Instance is null when dispatching SaveBattleAction");
        return false;
      }

      return Store.Instance.SaveBattle(fileName, format);
    }

    /// <summary>
    /// Dispatch a SaveBattleStartedAction to the ECS world.
    /// </summary>
    /// <param name="fileName">The fileName value for the action.</param>
    /// <param name="timestamp">The timestamp value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool SaveBattleStarted(this Store store, FixedString128Bytes fileName, float timestamp)
    {
      if (store == null)
      {
        UnityEngine.Debug.LogError("Store instance is null when dispatching SaveBattleStartedAction");
        return false;
      }

      var action = new SaveBattleStartedAction
      {
        fileName = fileName,
        timestamp = timestamp,
      };

      store.Dispatch(action);
      return true;
    }

    /// <summary>
    /// Dispatch a SaveBattleStartedAction using the Store singleton instance.
    /// </summary>
    /// <param name="fileName">The fileName value for the action.</param>
    /// <param name="timestamp">The timestamp value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool SaveBattleStarted(FixedString128Bytes fileName, float timestamp)
    {
      if (Store.Instance == null)
      {
        UnityEngine.Debug.LogError("Store.Instance is null when dispatching SaveBattleStartedAction");
        return false;
      }

      return Store.Instance.SaveBattleStarted(fileName, timestamp);
    }

    /// <summary>
    /// Dispatch a SaveBattleCompletedAction to the ECS world.
    /// </summary>
    /// <param name="fileName">The fileName value for the action.</param>
    /// <param name="filePath">The filePath value for the action.</param>
    /// <param name="fileSizeBytes">The fileSizeBytes value for the action.</param>
    /// <param name="duration">The duration value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool SaveBattleCompleted(this Store store, FixedString128Bytes fileName, FixedString512Bytes filePath, long fileSizeBytes, float duration)
    {
      if (store == null)
      {
        UnityEngine.Debug.LogError("Store instance is null when dispatching SaveBattleCompletedAction");
        return false;
      }

      var action = new SaveBattleCompletedAction
      {
        fileName = fileName,
        filePath = filePath,
        fileSizeBytes = fileSizeBytes,
        duration = duration,
      };

      store.Dispatch(action);
      return true;
    }

    /// <summary>
    /// Dispatch a SaveBattleCompletedAction using the Store singleton instance.
    /// </summary>
    /// <param name="fileName">The fileName value for the action.</param>
    /// <param name="filePath">The filePath value for the action.</param>
    /// <param name="fileSizeBytes">The fileSizeBytes value for the action.</param>
    /// <param name="duration">The duration value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool SaveBattleCompleted(FixedString128Bytes fileName, FixedString512Bytes filePath, long fileSizeBytes, float duration)
    {
      if (Store.Instance == null)
      {
        UnityEngine.Debug.LogError("Store.Instance is null when dispatching SaveBattleCompletedAction");
        return false;
      }

      return Store.Instance.SaveBattleCompleted(fileName, filePath, fileSizeBytes, duration);
    }

    /// <summary>
    /// Dispatch a SaveBattleFailedAction to the ECS world.
    /// </summary>
    /// <param name="fileName">The fileName value for the action.</param>
    /// <param name="errorMessage">The errorMessage value for the action.</param>
    /// <param name="errorType">The errorType value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool SaveBattleFailed(this Store store, FixedString128Bytes fileName, FixedString512Bytes errorMessage, SaveErrorType errorType)
    {
      if (store == null)
      {
        UnityEngine.Debug.LogError("Store instance is null when dispatching SaveBattleFailedAction");
        return false;
      }

      var action = new SaveBattleFailedAction
      {
        fileName = fileName,
        errorMessage = errorMessage,
        errorType = errorType,
      };

      store.Dispatch(action);
      return true;
    }

    /// <summary>
    /// Dispatch a SaveBattleFailedAction using the Store singleton instance.
    /// </summary>
    /// <param name="fileName">The fileName value for the action.</param>
    /// <param name="errorMessage">The errorMessage value for the action.</param>
    /// <param name="errorType">The errorType value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool SaveBattleFailed(FixedString128Bytes fileName, FixedString512Bytes errorMessage, SaveErrorType errorType)
    {
      if (Store.Instance == null)
      {
        UnityEngine.Debug.LogError("Store.Instance is null when dispatching SaveBattleFailedAction");
        return false;
      }

      return Store.Instance.SaveBattleFailed(fileName, errorMessage, errorType);
    }

    /// <summary>
    /// Dispatch a BattleLogAction to the ECS world.
    /// </summary>
    /// <param name="logType">The logType value for the action.</param>
    /// <param name="message">The message value for the action.</param>
    /// <param name="sourceEntity">The sourceEntity value for the action.</param>
    /// <param name="targetEntity">The targetEntity value for the action.</param>
    /// <param name="numericValue">The numericValue value for the action.</param>
    /// <param name="timestamp">The timestamp value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool BattleLog(this Store store, LogType logType, FixedString128Bytes message, Entity sourceEntity, Entity targetEntity, int numericValue, float timestamp)
    {
      if (store == null)
      {
        UnityEngine.Debug.LogError("Store instance is null when dispatching BattleLogAction");
        return false;
      }

      var action = new BattleLogAction
      {
        logType = logType,
        message = message,
        sourceEntity = sourceEntity,
        targetEntity = targetEntity,
        numericValue = numericValue,
        timestamp = timestamp,
      };

      store.Dispatch(action);
      return true;
    }

    /// <summary>
    /// Dispatch a BattleLogAction using the Store singleton instance.
    /// </summary>
    /// <param name="logType">The logType value for the action.</param>
    /// <param name="message">The message value for the action.</param>
    /// <param name="sourceEntity">The sourceEntity value for the action.</param>
    /// <param name="targetEntity">The targetEntity value for the action.</param>
    /// <param name="numericValue">The numericValue value for the action.</param>
    /// <param name="timestamp">The timestamp value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool BattleLog(LogType logType, FixedString128Bytes message, Entity sourceEntity, Entity targetEntity, int numericValue, float timestamp)
    {
      if (Store.Instance == null)
      {
        UnityEngine.Debug.LogError("Store.Instance is null when dispatching BattleLogAction");
        return false;
      }

      return Store.Instance.BattleLog(logType, message, sourceEntity, targetEntity, numericValue, timestamp);
    }

    /// <summary>
    /// Dispatch a ClearBattleLogAction to the ECS world.
    /// </summary>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool ClearBattleLog(this Store store)
    {
      if (store == null)
      {
        UnityEngine.Debug.LogError("Store instance is null when dispatching ClearBattleLogAction");
        return false;
      }

      var action = new ClearBattleLogAction
      {
      };

      store.Dispatch(action);
      return true;
    }

    /// <summary>
    /// Dispatch a ClearBattleLogAction using the Store singleton instance.
    /// </summary>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool ClearBattleLog()
    {
      if (Store.Instance == null)
      {
        UnityEngine.Debug.LogError("Store.Instance is null when dispatching ClearBattleLogAction");
        return false;
      }

      return Store.Instance.ClearBattleLog();
    }

    /// <summary>
    /// Dispatch a EnemyTurnStartedAction to the ECS world.
    /// </summary>
    /// <param name="enemyEntity">The enemyEntity value for the action.</param>
    /// <param name="turnIndex">The turnIndex value for the action.</param>
    /// <param name="turnCount">The turnCount value for the action.</param>
    /// <param name="enemyName">The enemyName value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool EnemyTurnStarted(this Store store, Entity enemyEntity, int turnIndex, int turnCount, FixedString64Bytes enemyName)
    {
      if (store == null)
      {
        UnityEngine.Debug.LogError("Store instance is null when dispatching EnemyTurnStartedAction");
        return false;
      }

      var action = new EnemyTurnStartedAction
      {
        enemyEntity = enemyEntity,
        turnIndex = turnIndex,
        turnCount = turnCount,
        enemyName = enemyName,
      };

      store.Dispatch(action);
      return true;
    }

    /// <summary>
    /// Dispatch a EnemyTurnStartedAction using the Store singleton instance.
    /// </summary>
    /// <param name="enemyEntity">The enemyEntity value for the action.</param>
    /// <param name="turnIndex">The turnIndex value for the action.</param>
    /// <param name="turnCount">The turnCount value for the action.</param>
    /// <param name="enemyName">The enemyName value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool EnemyTurnStarted(Entity enemyEntity, int turnIndex, int turnCount, FixedString64Bytes enemyName)
    {
      if (Store.Instance == null)
      {
        UnityEngine.Debug.LogError("Store.Instance is null when dispatching EnemyTurnStartedAction");
        return false;
      }

      return Store.Instance.EnemyTurnStarted(enemyEntity, turnIndex, turnCount, enemyName);
    }

    /// <summary>
    /// Dispatch a AIReadyToDecideAction to the ECS world.
    /// </summary>
    /// <param name="enemyEntity">The enemyEntity value for the action.</param>
    /// <param name="thinkingDuration">The thinkingDuration value for the action.</param>
    /// <param name="thinkingStartTime">The thinkingStartTime value for the action.</param>
    /// <param name="behavior">The behavior value for the action.</param>
    /// <param name="turnCount">The turnCount value for the action.</param>
    /// <param name="currentHealth">The currentHealth value for the action.</param>
    /// <param name="maxHealth">The maxHealth value for the action.</param>
    /// <param name="statusEffects">The statusEffects value for the action.</param>
    /// <param name="potentialTargets">The potentialTargets value for the action.</param>
    /// <param name="aliveAllies">The aliveAllies value for the action.</param>
    /// <param name="aliveEnemies">The aliveEnemies value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool AIReadyToDecide(this Store store, Entity enemyEntity, float thinkingDuration, double thinkingStartTime, AIBehavior behavior, int turnCount, int currentHealth, int maxHealth, CharacterStatus statusEffects, FixedList64Bytes<AITargetInfo> potentialTargets, int aliveAllies, int aliveEnemies)
    {
      if (store == null)
      {
        UnityEngine.Debug.LogError("Store instance is null when dispatching AIReadyToDecideAction");
        return false;
      }

      var action = new AIReadyToDecideAction
      {
        enemyEntity = enemyEntity,
        thinkingDuration = thinkingDuration,
        thinkingStartTime = thinkingStartTime,
        behavior = behavior,
        turnCount = turnCount,
        currentHealth = currentHealth,
        maxHealth = maxHealth,
        statusEffects = statusEffects,
        potentialTargets = potentialTargets,
        aliveAllies = aliveAllies,
        aliveEnemies = aliveEnemies,
      };

      store.Dispatch(action);
      return true;
    }

    /// <summary>
    /// Dispatch a AIReadyToDecideAction using the Store singleton instance.
    /// </summary>
    /// <param name="enemyEntity">The enemyEntity value for the action.</param>
    /// <param name="thinkingDuration">The thinkingDuration value for the action.</param>
    /// <param name="thinkingStartTime">The thinkingStartTime value for the action.</param>
    /// <param name="behavior">The behavior value for the action.</param>
    /// <param name="turnCount">The turnCount value for the action.</param>
    /// <param name="currentHealth">The currentHealth value for the action.</param>
    /// <param name="maxHealth">The maxHealth value for the action.</param>
    /// <param name="statusEffects">The statusEffects value for the action.</param>
    /// <param name="potentialTargets">The potentialTargets value for the action.</param>
    /// <param name="aliveAllies">The aliveAllies value for the action.</param>
    /// <param name="aliveEnemies">The aliveEnemies value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool AIReadyToDecide(Entity enemyEntity, float thinkingDuration, double thinkingStartTime, AIBehavior behavior, int turnCount, int currentHealth, int maxHealth, CharacterStatus statusEffects, FixedList64Bytes<AITargetInfo> potentialTargets, int aliveAllies, int aliveEnemies)
    {
      if (Store.Instance == null)
      {
        UnityEngine.Debug.LogError("Store.Instance is null when dispatching AIReadyToDecideAction");
        return false;
      }

      return Store.Instance.AIReadyToDecide(enemyEntity, thinkingDuration, thinkingStartTime, behavior, turnCount, currentHealth, maxHealth, statusEffects, potentialTargets, aliveAllies, aliveEnemies);
    }

    /// <summary>
    /// Dispatch a AIThinkingAction to the ECS world.
    /// </summary>
    /// <param name="enemyEntity">The enemyEntity value for the action.</param>
    /// <param name="thinkDuration">The thinkDuration value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool AIThinking(this Store store, Entity enemyEntity, float thinkDuration)
    {
      if (store == null)
      {
        UnityEngine.Debug.LogError("Store instance is null when dispatching AIThinkingAction");
        return false;
      }

      var action = new AIThinkingAction
      {
        enemyEntity = enemyEntity,
        thinkDuration = thinkDuration,
      };

      store.Dispatch(action);
      return true;
    }

    /// <summary>
    /// Dispatch a AIThinkingAction using the Store singleton instance.
    /// </summary>
    /// <param name="enemyEntity">The enemyEntity value for the action.</param>
    /// <param name="thinkDuration">The thinkDuration value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool AIThinking(Entity enemyEntity, float thinkDuration)
    {
      if (Store.Instance == null)
      {
        UnityEngine.Debug.LogError("Store.Instance is null when dispatching AIThinkingAction");
        return false;
      }

      return Store.Instance.AIThinking(enemyEntity, thinkDuration);
    }

    /// <summary>
    /// Dispatch a AIDecisionMadeAction to the ECS world.
    /// </summary>
    /// <param name="enemyEntity">The enemyEntity value for the action.</param>
    /// <param name="chosenAction">The chosenAction value for the action.</param>
    /// <param name="targetEntity">The targetEntity value for the action.</param>
    /// <param name="skillId">The skillId value for the action.</param>
    /// <param name="turnCount">The turnCount value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool AIDecisionMade(this Store store, Entity enemyEntity, ActionType chosenAction, Entity targetEntity, int skillId, int turnCount)
    {
      if (store == null)
      {
        UnityEngine.Debug.LogError("Store instance is null when dispatching AIDecisionMadeAction");
        return false;
      }

      var action = new AIDecisionMadeAction
      {
        enemyEntity = enemyEntity,
        chosenAction = chosenAction,
        targetEntity = targetEntity,
        skillId = skillId,
        turnCount = turnCount,
      };

      store.Dispatch(action);
      return true;
    }

    /// <summary>
    /// Dispatch a AIDecisionMadeAction using the Store singleton instance.
    /// </summary>
    /// <param name="enemyEntity">The enemyEntity value for the action.</param>
    /// <param name="chosenAction">The chosenAction value for the action.</param>
    /// <param name="targetEntity">The targetEntity value for the action.</param>
    /// <param name="skillId">The skillId value for the action.</param>
    /// <param name="turnCount">The turnCount value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool AIDecisionMade(Entity enemyEntity, ActionType chosenAction, Entity targetEntity, int skillId, int turnCount)
    {
      if (Store.Instance == null)
      {
        UnityEngine.Debug.LogError("Store.Instance is null when dispatching AIDecisionMadeAction");
        return false;
      }

      return Store.Instance.AIDecisionMade(enemyEntity, chosenAction, targetEntity, skillId, turnCount);
    }

    /// <summary>
    /// Dispatch a InitializeAIAction to the ECS world.
    /// </summary>
    /// <param name="useAdvancedAI">The useAdvancedAI value for the action.</param>
    /// <param name="globalDifficultyModifier">The globalDifficultyModifier value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool InitializeAI(this Store store, bool useAdvancedAI, float globalDifficultyModifier)
    {
      if (store == null)
      {
        UnityEngine.Debug.LogError("Store instance is null when dispatching InitializeAIAction");
        return false;
      }

      var action = new InitializeAIAction
      {
        useAdvancedAI = useAdvancedAI,
        globalDifficultyModifier = globalDifficultyModifier,
      };

      store.Dispatch(action);
      return true;
    }

    /// <summary>
    /// Dispatch a InitializeAIAction using the Store singleton instance.
    /// </summary>
    /// <param name="useAdvancedAI">The useAdvancedAI value for the action.</param>
    /// <param name="globalDifficultyModifier">The globalDifficultyModifier value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool InitializeAI(bool useAdvancedAI, float globalDifficultyModifier)
    {
      if (Store.Instance == null)
      {
        UnityEngine.Debug.LogError("Store.Instance is null when dispatching InitializeAIAction");
        return false;
      }

      return Store.Instance.InitializeAI(useAdvancedAI, globalDifficultyModifier);
    }

    /// <summary>
    /// Dispatch a ModifyAIBehaviorAction to the ECS world.
    /// </summary>
    /// <param name="targetEntity">The targetEntity value for the action.</param>
    /// <param name="newStrategy">The newStrategy value for the action.</param>
    /// <param name="aggressionModifier">The aggressionModifier value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool ModifyAIBehavior(this Store store, Entity targetEntity, AIStrategy newStrategy, float aggressionModifier)
    {
      if (store == null)
      {
        UnityEngine.Debug.LogError("Store instance is null when dispatching ModifyAIBehaviorAction");
        return false;
      }

      var action = new ModifyAIBehaviorAction
      {
        targetEntity = targetEntity,
        newStrategy = newStrategy,
        aggressionModifier = aggressionModifier,
      };

      store.Dispatch(action);
      return true;
    }

    /// <summary>
    /// Dispatch a ModifyAIBehaviorAction using the Store singleton instance.
    /// </summary>
    /// <param name="targetEntity">The targetEntity value for the action.</param>
    /// <param name="newStrategy">The newStrategy value for the action.</param>
    /// <param name="aggressionModifier">The aggressionModifier value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool ModifyAIBehavior(Entity targetEntity, AIStrategy newStrategy, float aggressionModifier)
    {
      if (Store.Instance == null)
      {
        UnityEngine.Debug.LogError("Store.Instance is null when dispatching ModifyAIBehaviorAction");
        return false;
      }

      return Store.Instance.ModifyAIBehavior(targetEntity, newStrategy, aggressionModifier);
    }

    /// <summary>
    /// Dispatch a AIDecisionFailedAction to the ECS world.
    /// </summary>
    /// <param name="enemyEntity">The enemyEntity value for the action.</param>
    /// <param name="failureReason">The failureReason value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool AIDecisionFailed(this Store store, Entity enemyEntity, FixedString32Bytes failureReason)
    {
      if (store == null)
      {
        UnityEngine.Debug.LogError("Store instance is null when dispatching AIDecisionFailedAction");
        return false;
      }

      var action = new AIDecisionFailedAction
      {
        enemyEntity = enemyEntity,
        failureReason = failureReason,
      };

      store.Dispatch(action);
      return true;
    }

    /// <summary>
    /// Dispatch a AIDecisionFailedAction using the Store singleton instance.
    /// </summary>
    /// <param name="enemyEntity">The enemyEntity value for the action.</param>
    /// <param name="failureReason">The failureReason value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool AIDecisionFailed(Entity enemyEntity, FixedString32Bytes failureReason)
    {
      if (Store.Instance == null)
      {
        UnityEngine.Debug.LogError("Store.Instance is null when dispatching AIDecisionFailedAction");
        return false;
      }

      return Store.Instance.AIDecisionFailed(enemyEntity, failureReason);
    }

    /// <summary>
    /// Dispatch a ClearSaveErrorAction to the ECS world.
    /// </summary>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool ClearSaveError(this Store store)
    {
      if (store == null)
      {
        UnityEngine.Debug.LogError("Store instance is null when dispatching ClearSaveErrorAction");
        return false;
      }

      var action = new ClearSaveErrorAction
      {
      };

      store.Dispatch(action);
      return true;
    }

    /// <summary>
    /// Dispatch a ClearSaveErrorAction using the Store singleton instance.
    /// </summary>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool ClearSaveError()
    {
      if (Store.Instance == null)
      {
        UnityEngine.Debug.LogError("Store.Instance is null when dispatching ClearSaveErrorAction");
        return false;
      }

      return Store.Instance.ClearSaveError();
    }

    /// <summary>
    /// Dispatch a CancelActionAction to the ECS world.
    /// </summary>
    /// <param name="actingCharacter">The actingCharacter value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool CancelAction(this Store store, Entity actingCharacter)
    {
      if (store == null)
      {
        UnityEngine.Debug.LogError("Store instance is null when dispatching CancelActionAction");
        return false;
      }

      var action = new CancelActionAction
      {
        actingCharacter = actingCharacter,
      };

      store.Dispatch(action);
      return true;
    }

    /// <summary>
    /// Dispatch a CancelActionAction using the Store singleton instance.
    /// </summary>
    /// <param name="actingCharacter">The actingCharacter value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool CancelAction(Entity actingCharacter)
    {
      if (Store.Instance == null)
      {
        UnityEngine.Debug.LogError("Store.Instance is null when dispatching CancelActionAction");
        return false;
      }

      return Store.Instance.CancelAction(actingCharacter);
    }

    /// <summary>
    /// Dispatch a SelectSkillAction to the ECS world.
    /// </summary>
    /// <param name="skillId">The skillId value for the action.</param>
    /// <param name="actingCharacter">The actingCharacter value for the action.</param>
    /// <param name="targetRequired">The targetRequired value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool SelectSkill(this Store store, int skillId, Entity actingCharacter, bool targetRequired)
    {
      if (store == null)
      {
        UnityEngine.Debug.LogError("Store instance is null when dispatching SelectSkillAction");
        return false;
      }

      var action = new SelectSkillAction
      {
        skillId = skillId,
        actingCharacter = actingCharacter,
        targetRequired = targetRequired,
      };

      store.Dispatch(action);
      return true;
    }

    /// <summary>
    /// Dispatch a SelectSkillAction using the Store singleton instance.
    /// </summary>
    /// <param name="skillId">The skillId value for the action.</param>
    /// <param name="actingCharacter">The actingCharacter value for the action.</param>
    /// <param name="targetRequired">The targetRequired value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool SelectSkill(int skillId, Entity actingCharacter, bool targetRequired)
    {
      if (Store.Instance == null)
      {
        UnityEngine.Debug.LogError("Store.Instance is null when dispatching SelectSkillAction");
        return false;
      }

      return Store.Instance.SelectSkill(skillId, actingCharacter, targetRequired);
    }

    /// <summary>
    /// Dispatch a ShowTargetingAction to the ECS world.
    /// </summary>
    /// <param name="actionType">The actionType value for the action.</param>
    /// <param name="allowMultiTarget">The allowMultiTarget value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool ShowTargeting(this Store store, ActionType actionType, bool allowMultiTarget)
    {
      if (store == null)
      {
        UnityEngine.Debug.LogError("Store instance is null when dispatching ShowTargetingAction");
        return false;
      }

      var action = new ShowTargetingAction
      {
        actionType = actionType,
        allowMultiTarget = allowMultiTarget,
      };

      store.Dispatch(action);
      return true;
    }

    /// <summary>
    /// Dispatch a ShowTargetingAction using the Store singleton instance.
    /// </summary>
    /// <param name="actionType">The actionType value for the action.</param>
    /// <param name="allowMultiTarget">The allowMultiTarget value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool ShowTargeting(ActionType actionType, bool allowMultiTarget)
    {
      if (Store.Instance == null)
      {
        UnityEngine.Debug.LogError("Store.Instance is null when dispatching ShowTargetingAction");
        return false;
      }

      return Store.Instance.ShowTargeting(actionType, allowMultiTarget);
    }

  }
}
