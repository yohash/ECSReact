// <auto-generated>
// Generated by ECSReact ISystem Bridge Generator
// Source: AIExecutionReducer
// Type: IReducer
// Generated at: 2025-10-07 00:18:04
// Do not modify this file directly - changes will be lost on regeneration
// </auto-generated>

using Unity.Entities;
using Unity.Burst;
using Unity.Collections;
using ECSReact.Core;
using ECSReact.Samples.BattleSystem;

namespace ECSReact.Samples.BattleSystem
{
  /// <summary>
  /// Generated ISystem implementation for AIExecutionReducer.
  /// Type: IReducer
  /// State: AIThinkingState, Action: AIDecisionMadeAction
  /// </summary>
  [UpdateInGroup(typeof(ReducerSystemGroup))]
  public partial struct AIExecutionReducer_System : ISystem
  {
    private AIExecutionReducer logic;
    private EntityQuery actionQuery;

    public void OnCreate(ref SystemState state)
    {
      logic = new AIExecutionReducer();

      // Use EntityQueryBuilder for Burst compatibility
      var queryBuilder = new EntityQueryBuilder(Allocator.Temp)
        .WithAll<AIDecisionMadeAction, ActionTag>();
      actionQuery = state.GetEntityQuery(queryBuilder);
      queryBuilder.Dispose();

      state.RequireForUpdate<AIThinkingState>();
      state.RequireForUpdate(actionQuery);
    }

    public void OnUpdate(ref SystemState state)
    {
      var gameState = SystemAPI.GetSingletonRW<AIThinkingState>();

      // Process all actions sequentially with SystemAPI access
      foreach (var (action, tag) in SystemAPI.Query<RefRO<AIDecisionMadeAction>, RefRO<ActionTag>>())
      {
        logic.Execute(ref gameState.ValueRW, in action.ValueRO, ref state);
      }
    }

  }
}
