// <auto-generated>
// This file was automatically generated by UIStateNotifier Generator
// Namespace: ECSReact.Samples.BattleSystem
// Do not modify this file directly - it will be overwritten
// </auto-generated>

using System;
using ECSReact.Core;
using ECSReact.Samples.BattleSystem;

namespace ECSReact.Samples.BattleSystem
{
  /// <summary>
  /// Generated extensions for UIStateNotifier that provide typed events for ECSReact.Samples.BattleSystem state types.
  /// </summary>
  public static class StateNotificationEvents
  {
    /// <summary>
    /// Event fired when BattleLogState changes.
    /// </summary>
    public static System.Action<BattleLogState> OnBattleLogStateChanged;

    /// <summary>
    /// Event fired when BattleState changes.
    /// </summary>
    public static System.Action<BattleState> OnBattleStateChanged;

    /// <summary>
    /// Event fired when PartyState changes.
    /// </summary>
    public static System.Action<PartyState> OnPartyStateChanged;

    /// <summary>
    /// Event fired when SaveState changes.
    /// </summary>
    public static System.Action<SaveState> OnSaveStateChanged;

    /// <summary>
    /// Event fired when UIBattleState changes.
    /// </summary>
    public static System.Action<UIBattleState> OnUIBattleStateChanged;

    /// <summary>
    /// Initialize event processors for ECSReact.Samples.BattleSystem state types.
    /// Call this method during application startup or when setting up the UI system.
    /// </summary>
    public static void InitializeEvents()
    {
      ECSReact.Core.UIStateNotifier
        .RegisterEventProcessor<ECSReact.Samples.BattleSystem.BattleLogStateChangedEvent>(evt =>
          OnBattleLogStateChanged?.Invoke(evt.newState));

      ECSReact.Core.UIStateNotifier
        .RegisterEventProcessor<ECSReact.Samples.BattleSystem.BattleStateChangedEvent>(evt =>
          OnBattleStateChanged?.Invoke(evt.newState));

      ECSReact.Core.UIStateNotifier
        .RegisterEventProcessor<ECSReact.Samples.BattleSystem.PartyStateChangedEvent>(evt =>
          OnPartyStateChanged?.Invoke(evt.newState));

      ECSReact.Core.UIStateNotifier
        .RegisterEventProcessor<ECSReact.Samples.BattleSystem.SaveStateChangedEvent>(evt =>
          OnSaveStateChanged?.Invoke(evt.newState));

      ECSReact.Core.UIStateNotifier
        .RegisterEventProcessor<ECSReact.Samples.BattleSystem.UIBattleStateChangedEvent>(evt =>
          OnUIBattleStateChanged?.Invoke(evt.newState));
    }
  }
}
