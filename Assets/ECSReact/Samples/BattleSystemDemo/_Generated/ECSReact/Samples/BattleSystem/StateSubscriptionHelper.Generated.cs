// <auto-generated>
// This file was automatically generated by StateSubscriptionHelper Generator
// Namespace: ECSReact.Samples.BattleSystem
// Do not modify this file directly - it will be overwritten
// </auto-generated>

using System;
using ECSReact.Core;
using ECSReact.Samples.BattleSystem;

namespace ECSReact.Samples.BattleSystem
{
  /// <summary>
  /// Generated helpers for StateSubscriptionHelper that register subscription handlers for ECSReact.Samples.BattleSystem state types.
  /// </summary>
  public static class StateSubscriptionRegistration
  {
    /// <summary>
    /// Initialize subscription handlers for ECSReact.Samples.BattleSystem state types.
    /// Call this method during application startup or when setting up the UI system.
    /// </summary>
    public static void InitializeSubscriptions()
    {
      // Register handlers for AIThinkingState
      StateSubscriptionHelper.RegisterStateSubscriptionHandlers<AIThinkingState>(
        subscriber => StateNotificationEvents.OnAIThinkingStateChanged += subscriber.OnStateChanged,
        subscriber => StateNotificationEvents.OnAIThinkingStateChanged -= subscriber.OnStateChanged
      );

      // Register handlers for BattleLogState
      StateSubscriptionHelper.RegisterStateSubscriptionHandlers<BattleLogState>(
        subscriber => StateNotificationEvents.OnBattleLogStateChanged += subscriber.OnStateChanged,
        subscriber => StateNotificationEvents.OnBattleLogStateChanged -= subscriber.OnStateChanged
      );

      // Register handlers for BattleState
      StateSubscriptionHelper.RegisterStateSubscriptionHandlers<BattleState>(
        subscriber => StateNotificationEvents.OnBattleStateChanged += subscriber.OnStateChanged,
        subscriber => StateNotificationEvents.OnBattleStateChanged -= subscriber.OnStateChanged
      );

      // Register handlers for PartyState
      StateSubscriptionHelper.RegisterStateSubscriptionHandlers<PartyState>(
        subscriber => StateNotificationEvents.OnPartyStateChanged += subscriber.OnStateChanged,
        subscriber => StateNotificationEvents.OnPartyStateChanged -= subscriber.OnStateChanged
      );

      // Register handlers for SaveState
      StateSubscriptionHelper.RegisterStateSubscriptionHandlers<SaveState>(
        subscriber => StateNotificationEvents.OnSaveStateChanged += subscriber.OnStateChanged,
        subscriber => StateNotificationEvents.OnSaveStateChanged -= subscriber.OnStateChanged
      );

      // Register handlers for UIBattleState
      StateSubscriptionHelper.RegisterStateSubscriptionHandlers<UIBattleState>(
        subscriber => StateNotificationEvents.OnUIBattleStateChanged += subscriber.OnStateChanged,
        subscriber => StateNotificationEvents.OnUIBattleStateChanged -= subscriber.OnStateChanged
      );

    }
  }
}
