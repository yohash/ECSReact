// <auto-generated>
// Generated by ECSReact ISystem Bridge Generator
// Source: SaveBattleMiddleware
// Type: IMiddleware
// Generated at: 2025-10-03 01:12:26
// Do not modify this file directly - changes will be lost on regeneration
// </auto-generated>

using Unity.Entities;
using Unity.Burst;
using Unity.Collections;
using ECSReact.Core;
using ECSReact.Samples.BattleSystem;

namespace ECSReact.Samples.BattleSystem
{
  /// <summary>
  /// Generated ISystem implementation for SaveBattleMiddleware.
  /// Type: IMiddleware
  /// Action: SaveBattleAction
  /// Can filter actions
  /// </summary>
  [UpdateInGroup(typeof(MiddlewareSystemGroup))]
  public partial struct SaveBattleMiddleware_System : ISystem
  {
    private SaveBattleMiddleware logic;
    private EntityQuery actionQuery;

    public void OnCreate(ref SystemState state)
    {
      logic = new SaveBattleMiddleware();

      // Use EntityQueryBuilder for Burst compatibility
      var queryBuilder = new EntityQueryBuilder(Allocator.Temp)
        .WithAll<SaveBattleAction, ActionTag>();
      actionQuery = state.GetEntityQuery(queryBuilder);
      queryBuilder.Dispose();

      state.RequireForUpdate(actionQuery);
      state.RequireForUpdate<SaveBattleAction>();
    }

    public void OnUpdate(ref SystemState state)
    {
      var ecb = new EntityCommandBuffer(Allocator.TempJob);

      // Process all actions sequentially - can filter
      foreach (var (action, entity) in SystemAPI.Query<RefRW<SaveBattleAction>>()
          .WithAll<ActionTag>().WithEntityAccess())
      {
        bool shouldContinue = logic.Process(ref action.ValueRW, ref state);
        if (!shouldContinue)
        {
          // Middleware filtered this action - destroy it
          ecb.DestroyEntity(entity);
        }
      }

      ecb.Playback(state.EntityManager);
      ecb.Dispose();
    }

    public void OnDestroy(ref SystemState state) { }

  }
}
