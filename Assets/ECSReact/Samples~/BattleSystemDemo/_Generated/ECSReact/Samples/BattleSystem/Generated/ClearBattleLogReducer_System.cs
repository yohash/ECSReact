// <auto-generated>
// Generated by ECSReact ISystem Bridge Generator
// Source: ClearBattleLogReducer
// Type: IReducer
// Generated at: 2025-10-11 00:57:38
// Do not modify this file directly - changes will be lost on regeneration
// </auto-generated>

using Unity.Entities;
using Unity.Burst;
using Unity.Collections;
using ECSReact.Core;
using ECSReact.Samples.BattleSystem;

namespace ECSReact.Samples.BattleSystem
{
  /// <summary>
  /// Generated ISystem implementation for ClearBattleLogReducer.
  /// Type: IReducer
  /// State: BattleLogState, Action: ClearBattleLogAction
  /// </summary>
  [UpdateInGroup(typeof(ReducerSystemGroup))]
  [BurstCompile]
  public partial struct ClearBattleLogReducer_System : ISystem
  {
    private ClearBattleLogReducer logic;
    private EntityQuery actionQuery;
    private ComponentLookup<ClearBattleLogAction> actionLookup;

    [BurstCompile]
    public void OnCreate(ref SystemState state)
    {
      logic = new ClearBattleLogReducer();

      // Use EntityQueryBuilder for Burst compatibility
      var queryBuilder = new EntityQueryBuilder(Allocator.Temp)
        .WithAll<ClearBattleLogAction, ActionTag>();
      actionQuery = state.GetEntityQuery(queryBuilder);
      queryBuilder.Dispose();

      // Create ComponentLookup once for reuse
      actionLookup = state.GetComponentLookup<ClearBattleLogAction>(isReadOnly: true);

      state.RequireForUpdate<BattleLogState>();
      state.RequireForUpdate(actionQuery);
    }

    public void OnUpdate(ref SystemState state)
    {
      var gameState = SystemAPI.GetSingletonRW<BattleLogState>();

      // Update ComponentLookup to latest data
      actionLookup.Update(ref state);
      
      // Call Burst-compiled processing
      ProcessActions(ref state, gameState, actionLookup);
    }

    [BurstCompile]
    private void ProcessActions(
      ref SystemState state,
      RefRW<BattleLogState> gameState,
      ComponentLookup<ClearBattleLogAction> actionLookup)
    {
      // Process all actions sequentially - uses cached query
      var entities = actionQuery.ToEntityArray(Allocator.Temp);

      // ✅ Check once per frame if component is zero-sized
      var type = new ComponentType(typeof(ClearBattleLogAction));
      bool isZeroSized = type.IsZeroSized;

      foreach (var entity in entities)
      {
        if (isZeroSized) {
          // ✅ Zero-sized: use default value
          var action = default(ClearBattleLogAction);
          logic.Execute(ref gameState.ValueRW, in action, ref state);
        } else {
          var action =  actionLookup.GetRefRO(entity);
          logic.Execute(ref gameState.ValueRW, in action.ValueRO, ref state);
        }
      }
      
      entities.Dispose();
    }

  }
}
