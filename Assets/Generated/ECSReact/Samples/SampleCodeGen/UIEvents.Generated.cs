// <auto-generated>
// This file was automatically generated by UIStateNotifier Generator
// Namespace: ECSReact.Samples.SampleCodeGen
// Do not modify this file directly - it will be overwritten
// </auto-generated>

using ECSReact.Core;
using ECSReact.Samples.SampleCodeGen;

namespace ECSReact.Samples.SampleCodeGen
{
  /// <summary>
  /// UI event fired when GameState from ECSReact.Samples.SampleCodeGen changes.
  /// </summary>
  public class GameStateChangedEvent : UIEvent
  {
    public GameState newState;
    public GameState oldState;
    public bool hasOldState;

    public GameStateChangedEvent(GameState newState, GameState oldState, bool hasOldState)
    {
      this.newState = newState;
      this.oldState = oldState;
      this.hasOldState = hasOldState;
      this.priority = UIEventPriority.Normal;
    }
  }

  /// <summary>
  /// UI event fired when PlayerState from ECSReact.Samples.SampleCodeGen changes.
  /// </summary>
  public class PlayerStateChangedEvent : UIEvent
  {
    public PlayerState newState;
    public PlayerState oldState;
    public bool hasOldState;

    public PlayerStateChangedEvent(PlayerState newState, PlayerState oldState, bool hasOldState)
    {
      this.newState = newState;
      this.oldState = oldState;
      this.hasOldState = hasOldState;
      this.priority = UIEventPriority.Normal;
    }
  }

  /// <summary>
  /// UI event fired when UIState from ECSReact.Samples.SampleCodeGen changes.
  /// </summary>
  public class UIStateChangedEvent : UIEvent
  {
    public UIState newState;
    public UIState oldState;
    public bool hasOldState;

    public UIStateChangedEvent(UIState newState, UIState oldState, bool hasOldState)
    {
      this.newState = newState;
      this.oldState = oldState;
      this.hasOldState = hasOldState;
      this.priority = UIEventPriority.Normal;
    }
  }

  /// <summary>
  /// UI event fired when CombatState from ECSReact.Samples.SampleCodeGen changes.
  /// </summary>
  public class CombatStateChangedEvent : UIEvent
  {
    public CombatState newState;
    public CombatState oldState;
    public bool hasOldState;

    public CombatStateChangedEvent(CombatState newState, CombatState oldState, bool hasOldState)
    {
      this.newState = newState;
      this.oldState = oldState;
      this.hasOldState = hasOldState;
      this.priority = UIEventPriority.Normal;
    }
  }

  /// <summary>
  /// UI event fired when InventoryState from ECSReact.Samples.SampleCodeGen changes.
  /// </summary>
  public class InventoryStateChangedEvent : UIEvent
  {
    public InventoryState newState;
    public InventoryState oldState;
    public bool hasOldState;

    public InventoryStateChangedEvent(InventoryState newState, InventoryState oldState, bool hasOldState)
    {
      this.newState = newState;
      this.oldState = oldState;
      this.hasOldState = hasOldState;
      this.priority = UIEventPriority.Normal;
    }
  }
}
