// <auto-generated>
// This file was automatically generated by StateSubscriptionHelper Generator
// Namespace: ECSReact.Samples.SampleCodeGen
// Do not modify this file directly - it will be overwritten
// </auto-generated>

using System;
using ECSReact.Core;
using ECSReact.Samples.SampleCodeGen;

namespace ECSReact.Samples.SampleCodeGen
{
  /// <summary>
  /// Generated helpers for StateSubscriptionHelper that register subscription handlers for ECSReact.Samples.SampleCodeGen state types.
  /// </summary>
  public static class StateSubscriptionRegistration
  {
    /// <summary>
    /// Initialize subscription handlers for ECSReact.Samples.SampleCodeGen state types.
    /// Call this method during application startup or when setting up the UI system.
    /// </summary>
    public static void InitializeSubscriptions()
    {
      // Register handlers for GameState
      StateSubscriptionHelper.RegisterStateSubscriptionHandlers<GameState>(
        subscriber => StateNotificationEvents.OnGameStateChanged += subscriber.OnStateChanged,
        subscriber => StateNotificationEvents.OnGameStateChanged -= subscriber.OnStateChanged
      );

      // Register handlers for PlayerState
      StateSubscriptionHelper.RegisterStateSubscriptionHandlers<PlayerState>(
        subscriber => StateNotificationEvents.OnPlayerStateChanged += subscriber.OnStateChanged,
        subscriber => StateNotificationEvents.OnPlayerStateChanged -= subscriber.OnStateChanged
      );

      // Register handlers for UIState
      StateSubscriptionHelper.RegisterStateSubscriptionHandlers<UIState>(
        subscriber => StateNotificationEvents.OnUIStateChanged += subscriber.OnStateChanged,
        subscriber => StateNotificationEvents.OnUIStateChanged -= subscriber.OnStateChanged
      );

      // Register handlers for CombatState
      StateSubscriptionHelper.RegisterStateSubscriptionHandlers<CombatState>(
        subscriber => StateNotificationEvents.OnCombatStateChanged += subscriber.OnStateChanged,
        subscriber => StateNotificationEvents.OnCombatStateChanged -= subscriber.OnStateChanged
      );

      // Register handlers for InventoryState
      StateSubscriptionHelper.RegisterStateSubscriptionHandlers<InventoryState>(
        subscriber => StateNotificationEvents.OnInventoryStateChanged += subscriber.OnStateChanged,
        subscriber => StateNotificationEvents.OnInventoryStateChanged -= subscriber.OnStateChanged
      );

    }
  }
}
