// <auto-generated>
// This file was automatically generated by Store Extensions Generator
// Do not modify this file directly - it will be overwritten
// </auto-generated>

using Unity.Entities;
using Unity.Mathematics;
using Unity.Collections;
using ECSReact.Core;

namespace ECSReact.Samples.SampleCodeGen
{
  /// <summary>
  /// Generated extension methods for Store that provide typed action dispatch methods.
  /// These methods eliminate boilerplate and provide IntelliSense support for action parameters.
  /// </summary>
  public static class StoreExtensions
  {
    /// <summary>
    /// Dispatch a SpendMatterAction to the ECS world.
    /// </summary>
    /// <param name="amount">The amount value for the action.</param>
    /// <param name="itemId">The itemId value for the action.</param>
    /// <param name="allowOverspend">The allowOverspend value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool SpendMatter(this Store store, int amount, int itemId, bool allowOverspend)
    {
      if (store == null)
      {
        UnityEngine.Debug.LogError("Store instance is null when dispatching SpendMatterAction");
        return false;
      }

      var action = new SpendMatterAction
      {
        amount = amount,
        itemId = itemId,
        allowOverspend = allowOverspend,
      };

      store.Dispatch(action);
      return true;
    }

    /// <summary>
    /// Dispatch a SpendMatterAction using the Store singleton instance.
    /// </summary>
    /// <param name="amount">The amount value for the action.</param>
    /// <param name="itemId">The itemId value for the action.</param>
    /// <param name="allowOverspend">The allowOverspend value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool SpendMatter(int amount, int itemId, bool allowOverspend)
    {
      if (Store.Instance == null)
      {
        UnityEngine.Debug.LogError("Store.Instance is null when dispatching SpendMatterAction");
        return false;
      }

      return Store.Instance.SpendMatter(amount, itemId, allowOverspend);
    }

    /// <summary>
    /// Dispatch a MovePlayerAction to the ECS world.
    /// </summary>
    /// <param name="playerEntity">The playerEntity value for the action.</param>
    /// <param name="targetPosition">The targetPosition value for the action.</param>
    /// <param name="moveSpeed">The moveSpeed value for the action.</param>
    /// <param name="useDash">The useDash value for the action.</param>
    /// <param name="targetRotation">The targetRotation value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool MovePlayer(this Store store, Entity playerEntity, float3 targetPosition, float moveSpeed, bool useDash, quaternion targetRotation)
    {
      if (store == null)
      {
        UnityEngine.Debug.LogError("Store instance is null when dispatching MovePlayerAction");
        return false;
      }

      var action = new MovePlayerAction
      {
        playerEntity = playerEntity,
        targetPosition = targetPosition,
        moveSpeed = moveSpeed,
        useDash = useDash,
        targetRotation = targetRotation,
      };

      store.Dispatch(action);
      return true;
    }

    /// <summary>
    /// Dispatch a MovePlayerAction using the Store singleton instance.
    /// </summary>
    /// <param name="playerEntity">The playerEntity value for the action.</param>
    /// <param name="targetPosition">The targetPosition value for the action.</param>
    /// <param name="moveSpeed">The moveSpeed value for the action.</param>
    /// <param name="useDash">The useDash value for the action.</param>
    /// <param name="targetRotation">The targetRotation value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool MovePlayer(Entity playerEntity, float3 targetPosition, float moveSpeed, bool useDash, quaternion targetRotation)
    {
      if (Store.Instance == null)
      {
        UnityEngine.Debug.LogError("Store.Instance is null when dispatching MovePlayerAction");
        return false;
      }

      return Store.Instance.MovePlayer(playerEntity, targetPosition, moveSpeed, useDash, targetRotation);
    }

    /// <summary>
    /// Dispatch a UnlockTechAction to the ECS world.
    /// </summary>
    /// <param name="techId">The techId value for the action.</param>
    /// <param name="cost">The cost value for the action.</param>
    /// <param name="researchEntity">The researchEntity value for the action.</param>
    /// <param name="skipPrerequisites">The skipPrerequisites value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool UnlockTech(this Store store, int techId, int cost, Entity researchEntity, bool skipPrerequisites)
    {
      if (store == null)
      {
        UnityEngine.Debug.LogError("Store instance is null when dispatching UnlockTechAction");
        return false;
      }

      var action = new UnlockTechAction
      {
        techId = techId,
        cost = cost,
        researchEntity = researchEntity,
        skipPrerequisites = skipPrerequisites,
      };

      store.Dispatch(action);
      return true;
    }

    /// <summary>
    /// Dispatch a UnlockTechAction using the Store singleton instance.
    /// </summary>
    /// <param name="techId">The techId value for the action.</param>
    /// <param name="cost">The cost value for the action.</param>
    /// <param name="researchEntity">The researchEntity value for the action.</param>
    /// <param name="skipPrerequisites">The skipPrerequisites value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool UnlockTech(int techId, int cost, Entity researchEntity, bool skipPrerequisites)
    {
      if (Store.Instance == null)
      {
        UnityEngine.Debug.LogError("Store.Instance is null when dispatching UnlockTechAction");
        return false;
      }

      return Store.Instance.UnlockTech(techId, cost, researchEntity, skipPrerequisites);
    }

    /// <summary>
    /// Dispatch a AttackTargetAction to the ECS world.
    /// </summary>
    /// <param name="attackerEntity">The attackerEntity value for the action.</param>
    /// <param name="targetEntity">The targetEntity value for the action.</param>
    /// <param name="damage">The damage value for the action.</param>
    /// <param name="attackPosition">The attackPosition value for the action.</param>
    /// <param name="attackType">The attackType value for the action.</param>
    /// <param name="isCritical">The isCritical value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool AttackTarget(this Store store, Entity attackerEntity, Entity targetEntity, float damage, float3 attackPosition, FixedString32Bytes attackType, bool isCritical)
    {
      if (store == null)
      {
        UnityEngine.Debug.LogError("Store instance is null when dispatching AttackTargetAction");
        return false;
      }

      var action = new AttackTargetAction
      {
        attackerEntity = attackerEntity,
        targetEntity = targetEntity,
        damage = damage,
        attackPosition = attackPosition,
        attackType = attackType,
        isCritical = isCritical,
      };

      store.Dispatch(action);
      return true;
    }

    /// <summary>
    /// Dispatch a AttackTargetAction using the Store singleton instance.
    /// </summary>
    /// <param name="attackerEntity">The attackerEntity value for the action.</param>
    /// <param name="targetEntity">The targetEntity value for the action.</param>
    /// <param name="damage">The damage value for the action.</param>
    /// <param name="attackPosition">The attackPosition value for the action.</param>
    /// <param name="attackType">The attackType value for the action.</param>
    /// <param name="isCritical">The isCritical value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool AttackTarget(Entity attackerEntity, Entity targetEntity, float damage, float3 attackPosition, FixedString32Bytes attackType, bool isCritical)
    {
      if (Store.Instance == null)
      {
        UnityEngine.Debug.LogError("Store.Instance is null when dispatching AttackTargetAction");
        return false;
      }

      return Store.Instance.AttackTarget(attackerEntity, targetEntity, damage, attackPosition, attackType, isCritical);
    }

    /// <summary>
    /// Dispatch a ChangeScreenAction to the ECS world.
    /// </summary>
    /// <param name="screenName">The screenName value for the action.</param>
    /// <param name="addToHistory">The addToHistory value for the action.</param>
    /// <param name="transitionDuration">The transitionDuration value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool ChangeScreen(this Store store, FixedString64Bytes screenName, bool addToHistory, float transitionDuration)
    {
      if (store == null)
      {
        UnityEngine.Debug.LogError("Store instance is null when dispatching ChangeScreenAction");
        return false;
      }

      var action = new ChangeScreenAction
      {
        screenName = screenName,
        addToHistory = addToHistory,
        transitionDuration = transitionDuration,
      };

      store.Dispatch(action);
      return true;
    }

    /// <summary>
    /// Dispatch a ChangeScreenAction using the Store singleton instance.
    /// </summary>
    /// <param name="screenName">The screenName value for the action.</param>
    /// <param name="addToHistory">The addToHistory value for the action.</param>
    /// <param name="transitionDuration">The transitionDuration value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool ChangeScreen(FixedString64Bytes screenName, bool addToHistory, float transitionDuration)
    {
      if (Store.Instance == null)
      {
        UnityEngine.Debug.LogError("Store.Instance is null when dispatching ChangeScreenAction");
        return false;
      }

      return Store.Instance.ChangeScreen(screenName, addToHistory, transitionDuration);
    }

    /// <summary>
    /// Dispatch a AddItemAction to the ECS world.
    /// </summary>
    /// <param name="itemId">The itemId value for the action.</param>
    /// <param name="quantity">The quantity value for the action.</param>
    /// <param name="targetInventory">The targetInventory value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool AddItem(this Store store, int itemId, int quantity, Entity targetInventory)
    {
      if (store == null)
      {
        UnityEngine.Debug.LogError("Store instance is null when dispatching AddItemAction");
        return false;
      }

      var action = new AddItemAction
      {
        itemId = itemId,
        quantity = quantity,
        targetInventory = targetInventory,
      };

      store.Dispatch(action);
      return true;
    }

    /// <summary>
    /// Dispatch a AddItemAction using the Store singleton instance.
    /// </summary>
    /// <param name="itemId">The itemId value for the action.</param>
    /// <param name="quantity">The quantity value for the action.</param>
    /// <param name="targetInventory">The targetInventory value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool AddItem(int itemId, int quantity, Entity targetInventory)
    {
      if (Store.Instance == null)
      {
        UnityEngine.Debug.LogError("Store.Instance is null when dispatching AddItemAction");
        return false;
      }

      return Store.Instance.AddItem(itemId, quantity, targetInventory);
    }

    /// <summary>
    /// Dispatch a LevelUpAction to the ECS world.
    /// </summary>
    /// <param name="playerEntity">The playerEntity value for the action.</param>
    /// <param name="newLevel">The newLevel value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool LevelUp(this Store store, Entity playerEntity, int newLevel)
    {
      if (store == null)
      {
        UnityEngine.Debug.LogError("Store instance is null when dispatching LevelUpAction");
        return false;
      }

      var action = new LevelUpAction
      {
        playerEntity = playerEntity,
        newLevel = newLevel,
      };

      store.Dispatch(action);
      return true;
    }

    /// <summary>
    /// Dispatch a LevelUpAction using the Store singleton instance.
    /// </summary>
    /// <param name="playerEntity">The playerEntity value for the action.</param>
    /// <param name="newLevel">The newLevel value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool LevelUp(Entity playerEntity, int newLevel)
    {
      if (Store.Instance == null)
      {
        UnityEngine.Debug.LogError("Store.Instance is null when dispatching LevelUpAction");
        return false;
      }

      return Store.Instance.LevelUp(playerEntity, newLevel);
    }

    /// <summary>
    /// Dispatch a BuildStructureAction to the ECS world.
    /// </summary>
    /// <param name="builderEntity">The builderEntity value for the action.</param>
    /// <param name="structureType">The structureType value for the action.</param>
    /// <param name="buildPosition">The buildPosition value for the action.</param>
    /// <param name="buildRotation">The buildRotation value for the action.</param>
    /// <param name="materialCost">The materialCost value for the action.</param>
    /// <param name="buildTime">The buildTime value for the action.</param>
    /// <param name="autoStart">The autoStart value for the action.</param>
    /// <param name="structureName">The structureName value for the action.</param>
    /// <param name="targetFoundation">The targetFoundation value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool BuildStructure(this Store store, Entity builderEntity, int structureType, float3 buildPosition, quaternion buildRotation, int materialCost, float buildTime, bool autoStart, FixedString128Bytes structureName, Entity targetFoundation)
    {
      if (store == null)
      {
        UnityEngine.Debug.LogError("Store instance is null when dispatching BuildStructureAction");
        return false;
      }

      var action = new BuildStructureAction
      {
        builderEntity = builderEntity,
        structureType = structureType,
        buildPosition = buildPosition,
        buildRotation = buildRotation,
        materialCost = materialCost,
        buildTime = buildTime,
        autoStart = autoStart,
        structureName = structureName,
        targetFoundation = targetFoundation,
      };

      store.Dispatch(action);
      return true;
    }

    /// <summary>
    /// Dispatch a BuildStructureAction using the Store singleton instance.
    /// </summary>
    /// <param name="builderEntity">The builderEntity value for the action.</param>
    /// <param name="structureType">The structureType value for the action.</param>
    /// <param name="buildPosition">The buildPosition value for the action.</param>
    /// <param name="buildRotation">The buildRotation value for the action.</param>
    /// <param name="materialCost">The materialCost value for the action.</param>
    /// <param name="buildTime">The buildTime value for the action.</param>
    /// <param name="autoStart">The autoStart value for the action.</param>
    /// <param name="structureName">The structureName value for the action.</param>
    /// <param name="targetFoundation">The targetFoundation value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool BuildStructure(Entity builderEntity, int structureType, float3 buildPosition, quaternion buildRotation, int materialCost, float buildTime, bool autoStart, FixedString128Bytes structureName, Entity targetFoundation)
    {
      if (Store.Instance == null)
      {
        UnityEngine.Debug.LogError("Store.Instance is null when dispatching BuildStructureAction");
        return false;
      }

      return Store.Instance.BuildStructure(builderEntity, structureType, buildPosition, buildRotation, materialCost, buildTime, autoStart, structureName, targetFoundation);
    }

    /// <summary>
    /// Dispatch a SaveGameAction to the ECS world.
    /// </summary>
    /// <param name="fileName">The fileName value for the action.</param>
    /// <param name="includeSettings">The includeSettings value for the action.</param>
    /// <param name="compressData">The compressData value for the action.</param>
    /// <param name="createBackup">The createBackup value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool SaveGame(this Store store, FixedString128Bytes fileName, bool includeSettings, bool compressData, bool createBackup)
    {
      if (store == null)
      {
        UnityEngine.Debug.LogError("Store instance is null when dispatching SaveGameAction");
        return false;
      }

      var action = new SaveGameAction
      {
        fileName = fileName,
        includeSettings = includeSettings,
        compressData = compressData,
        createBackup = createBackup,
      };

      store.Dispatch(action);
      return true;
    }

    /// <summary>
    /// Dispatch a SaveGameAction using the Store singleton instance.
    /// </summary>
    /// <param name="fileName">The fileName value for the action.</param>
    /// <param name="includeSettings">The includeSettings value for the action.</param>
    /// <param name="compressData">The compressData value for the action.</param>
    /// <param name="createBackup">The createBackup value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool SaveGame(FixedString128Bytes fileName, bool includeSettings, bool compressData, bool createBackup)
    {
      if (Store.Instance == null)
      {
        UnityEngine.Debug.LogError("Store.Instance is null when dispatching SaveGameAction");
        return false;
      }

      return Store.Instance.SaveGame(fileName, includeSettings, compressData, createBackup);
    }

    /// <summary>
    /// Dispatch a TakeDamageAction to the ECS world.
    /// </summary>
    /// <param name="targetEntity">The targetEntity value for the action.</param>
    /// <param name="damage">The damage value for the action.</param>
    /// <param name="damagePosition">The damagePosition value for the action.</param>
    /// <param name="damageSource">The damageSource value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool TakeDamage(this Store store, Entity targetEntity, float damage, float3 damagePosition, Entity damageSource)
    {
      if (store == null)
      {
        UnityEngine.Debug.LogError("Store instance is null when dispatching TakeDamageAction");
        return false;
      }

      var action = new TakeDamageAction
      {
        targetEntity = targetEntity,
        damage = damage,
        damagePosition = damagePosition,
        damageSource = damageSource,
      };

      store.Dispatch(action);
      return true;
    }

    /// <summary>
    /// Dispatch a TakeDamageAction using the Store singleton instance.
    /// </summary>
    /// <param name="targetEntity">The targetEntity value for the action.</param>
    /// <param name="damage">The damage value for the action.</param>
    /// <param name="damagePosition">The damagePosition value for the action.</param>
    /// <param name="damageSource">The damageSource value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool TakeDamage(Entity targetEntity, float damage, float3 damagePosition, Entity damageSource)
    {
      if (Store.Instance == null)
      {
        UnityEngine.Debug.LogError("Store.Instance is null when dispatching TakeDamageAction");
        return false;
      }

      return Store.Instance.TakeDamage(targetEntity, damage, damagePosition, damageSource);
    }

  }
}
