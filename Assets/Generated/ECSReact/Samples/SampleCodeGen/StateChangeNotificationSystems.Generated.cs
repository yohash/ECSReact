// <auto-generated>
// This file was automatically generated by StateSubscriptionHelper Generator
// Namespace: ECSReact.Samples.SampleCodeGen
// Do not modify this file directly - it will be overwritten
// </auto-generated>

using Unity.Entities;
using Unity.Burst;
using ECSReact.Core;
using ECSReact.Samples.SampleCodeGen;

namespace ECSReact.Samples.SampleCodeGen
{
  /// <summary>
  /// Generated system that detects GameState changes and queues UI events.
  /// Generated for namespace: ECSReact.Samples.SampleCodeGen
  /// </summary>
  [UINotificationSystem]
  public partial class GameStateChangeNotificationSystem : StateChangeNotificationSystem<GameState>
  {
    protected override UIEvent CreateStateChangeEvent(GameState newState, GameState oldState, bool hasOldState)
    {
      return new GameStateChangedEvent(newState, oldState, hasOldState);
    }
  }

  /// <summary>
  /// Generated system that detects PlayerState changes and queues UI events.
  /// Generated for namespace: ECSReact.Samples.SampleCodeGen
  /// </summary>
  [UINotificationSystem]
  public partial class PlayerStateChangeNotificationSystem : StateChangeNotificationSystem<PlayerState>
  {
    protected override UIEvent CreateStateChangeEvent(PlayerState newState, PlayerState oldState, bool hasOldState)
    {
      return new PlayerStateChangedEvent(newState, oldState, hasOldState);
    }
  }

  /// <summary>
  /// Generated system that detects UIState changes and queues UI events.
  /// Generated for namespace: ECSReact.Samples.SampleCodeGen
  /// </summary>
  [UINotificationSystem]
  public partial class UIStateChangeNotificationSystem : StateChangeNotificationSystem<UIState>
  {
    protected override UIEvent CreateStateChangeEvent(UIState newState, UIState oldState, bool hasOldState)
    {
      return new UIStateChangedEvent(newState, oldState, hasOldState);
    }
  }

  /// <summary>
  /// Generated system that detects InventoryState changes and queues UI events.
  /// Generated for namespace: ECSReact.Samples.SampleCodeGen
  /// </summary>
  [UINotificationSystem]
  public partial class InventoryStateChangeNotificationSystem : StateChangeNotificationSystem<InventoryState>
  {
    protected override UIEvent CreateStateChangeEvent(InventoryState newState, InventoryState oldState, bool hasOldState)
    {
      return new InventoryStateChangedEvent(newState, oldState, hasOldState);
    }
  }

}
