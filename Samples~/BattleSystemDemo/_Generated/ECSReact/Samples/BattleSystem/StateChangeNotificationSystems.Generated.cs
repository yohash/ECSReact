// <auto-generated>
// This file was automatically generated by StateSubscriptionHelper Generator
// Namespace: ECSReact.Samples.BattleSystem
// Do not modify this file directly - it will be overwritten
// </auto-generated>

using Unity.Entities;
using Unity.Burst;
using ECSReact.Core;
using ECSReact.Samples.BattleSystem;

namespace ECSReact.Samples.BattleSystem
{
  /// <summary>
  /// Generated system that detects AIThinkingState changes and queues UI events.
  /// Generated for namespace: ECSReact.Samples.BattleSystem
  /// </summary>
  [BurstCompile]
  [UINotificationSystem]
  public partial class AIThinkingStateChangeNotificationSystem : StateChangeNotificationSystem<AIThinkingState>
  {
    protected override UIEvent CreateStateChangeEvent(AIThinkingState newState, AIThinkingState oldState, bool hasOldState)
    {
      return new AIThinkingStateChangedEvent(newState, oldState, hasOldState);
    }
  }

  /// <summary>
  /// Generated system that detects BattleLogState changes and queues UI events.
  /// Generated for namespace: ECSReact.Samples.BattleSystem
  /// </summary>
  [BurstCompile]
  [UINotificationSystem]
  public partial class BattleLogStateChangeNotificationSystem : StateChangeNotificationSystem<BattleLogState>
  {
    protected override UIEvent CreateStateChangeEvent(BattleLogState newState, BattleLogState oldState, bool hasOldState)
    {
      return new BattleLogStateChangedEvent(newState, oldState, hasOldState);
    }
  }

  /// <summary>
  /// Generated system that detects BattleState changes and queues UI events.
  /// Generated for namespace: ECSReact.Samples.BattleSystem
  /// </summary>
  [BurstCompile]
  [UINotificationSystem]
  public partial class BattleStateChangeNotificationSystem : StateChangeNotificationSystem<BattleState>
  {
    protected override UIEvent CreateStateChangeEvent(BattleState newState, BattleState oldState, bool hasOldState)
    {
      return new BattleStateChangedEvent(newState, oldState, hasOldState);
    }
  }

  /// <summary>
  /// Generated system that detects CharacterHealthState changes and queues UI events.
  /// Generated for namespace: ECSReact.Samples.BattleSystem
  /// </summary>
  [BurstCompile]
  [UINotificationSystem]
  public partial class CharacterHealthStateChangeNotificationSystem : StateChangeNotificationSystem<CharacterHealthState>
  {
    protected override UIEvent CreateStateChangeEvent(CharacterHealthState newState, CharacterHealthState oldState, bool hasOldState)
    {
      return new CharacterHealthStateChangedEvent(newState, oldState, hasOldState);
    }
  }

  /// <summary>
  /// Generated system that detects CharacterManaState changes and queues UI events.
  /// Generated for namespace: ECSReact.Samples.BattleSystem
  /// </summary>
  [BurstCompile]
  [UINotificationSystem]
  public partial class CharacterManaStateChangeNotificationSystem : StateChangeNotificationSystem<CharacterManaState>
  {
    protected override UIEvent CreateStateChangeEvent(CharacterManaState newState, CharacterManaState oldState, bool hasOldState)
    {
      return new CharacterManaStateChangedEvent(newState, oldState, hasOldState);
    }
  }

  /// <summary>
  /// Generated system that detects CharacterStatusState changes and queues UI events.
  /// Generated for namespace: ECSReact.Samples.BattleSystem
  /// </summary>
  [BurstCompile]
  [UINotificationSystem]
  public partial class CharacterStatusStateChangeNotificationSystem : StateChangeNotificationSystem<CharacterStatusState>
  {
    protected override UIEvent CreateStateChangeEvent(CharacterStatusState newState, CharacterStatusState oldState, bool hasOldState)
    {
      return new CharacterStatusStateChangedEvent(newState, oldState, hasOldState);
    }
  }

  /// <summary>
  /// Generated system that detects CharacterIdentityState changes and queues UI events.
  /// Generated for namespace: ECSReact.Samples.BattleSystem
  /// </summary>
  [BurstCompile]
  [UINotificationSystem]
  public partial class CharacterIdentityStateChangeNotificationSystem : StateChangeNotificationSystem<CharacterIdentityState>
  {
    protected override UIEvent CreateStateChangeEvent(CharacterIdentityState newState, CharacterIdentityState oldState, bool hasOldState)
    {
      return new CharacterIdentityStateChangedEvent(newState, oldState, hasOldState);
    }
  }

  /// <summary>
  /// Generated system that detects CharacterRosterState changes and queues UI events.
  /// Generated for namespace: ECSReact.Samples.BattleSystem
  /// </summary>
  [BurstCompile]
  [UINotificationSystem]
  public partial class CharacterRosterStateChangeNotificationSystem : StateChangeNotificationSystem<CharacterRosterState>
  {
    protected override UIEvent CreateStateChangeEvent(CharacterRosterState newState, CharacterRosterState oldState, bool hasOldState)
    {
      return new CharacterRosterStateChangedEvent(newState, oldState, hasOldState);
    }
  }

  /// <summary>
  /// Generated system that detects SaveState changes and queues UI events.
  /// Generated for namespace: ECSReact.Samples.BattleSystem
  /// </summary>
  [BurstCompile]
  [UINotificationSystem]
  public partial class SaveStateChangeNotificationSystem : StateChangeNotificationSystem<SaveState>
  {
    protected override UIEvent CreateStateChangeEvent(SaveState newState, SaveState oldState, bool hasOldState)
    {
      return new SaveStateChangedEvent(newState, oldState, hasOldState);
    }
  }

  /// <summary>
  /// Generated system that detects UIBattleState changes and queues UI events.
  /// Generated for namespace: ECSReact.Samples.BattleSystem
  /// </summary>
  [BurstCompile]
  [UINotificationSystem]
  public partial class UIBattleStateChangeNotificationSystem : StateChangeNotificationSystem<UIBattleState>
  {
    protected override UIEvent CreateStateChangeEvent(UIBattleState newState, UIBattleState oldState, bool hasOldState)
    {
      return new UIBattleStateChangedEvent(newState, oldState, hasOldState);
    }
  }

}
