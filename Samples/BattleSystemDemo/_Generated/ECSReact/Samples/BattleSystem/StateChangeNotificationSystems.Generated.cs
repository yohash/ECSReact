// <auto-generated>
// This file was automatically generated by StateSubscriptionHelper Generator
// Namespace: ECSReact.Samples.BattleSystem
// Do not modify this file directly - it will be overwritten
// </auto-generated>

using Unity.Entities;
using Unity.Burst;
using ECSReact.Core;
using ECSReact.Samples.BattleSystem;

namespace ECSReact.Samples.BattleSystem
{
  /// <summary>
  /// Generated system that detects BattleLogState changes and queues UI events.
  /// Generated for namespace: ECSReact.Samples.BattleSystem
  /// </summary>
  [UINotificationSystem]
  public partial class BattleLogStateChangeNotificationSystem : StateChangeNotificationSystem<BattleLogState>
  {
    protected override UIEvent CreateStateChangeEvent(BattleLogState newState, BattleLogState oldState, bool hasOldState)
    {
      return new BattleLogStateChangedEvent(newState, oldState, hasOldState);
    }
  }

  /// <summary>
  /// Generated system that detects BattleState changes and queues UI events.
  /// Generated for namespace: ECSReact.Samples.BattleSystem
  /// </summary>
  [UINotificationSystem]
  public partial class BattleStateChangeNotificationSystem : StateChangeNotificationSystem<BattleState>
  {
    protected override UIEvent CreateStateChangeEvent(BattleState newState, BattleState oldState, bool hasOldState)
    {
      return new BattleStateChangedEvent(newState, oldState, hasOldState);
    }
  }

  /// <summary>
  /// Generated system that detects PartyState changes and queues UI events.
  /// Generated for namespace: ECSReact.Samples.BattleSystem
  /// </summary>
  [UINotificationSystem]
  public partial class PartyStateChangeNotificationSystem : StateChangeNotificationSystem<PartyState>
  {
    protected override UIEvent CreateStateChangeEvent(PartyState newState, PartyState oldState, bool hasOldState)
    {
      return new PartyStateChangedEvent(newState, oldState, hasOldState);
    }
  }

  /// <summary>
  /// Generated system that detects SaveState changes and queues UI events.
  /// Generated for namespace: ECSReact.Samples.BattleSystem
  /// </summary>
  [UINotificationSystem]
  public partial class SaveStateChangeNotificationSystem : StateChangeNotificationSystem<SaveState>
  {
    protected override UIEvent CreateStateChangeEvent(SaveState newState, SaveState oldState, bool hasOldState)
    {
      return new SaveStateChangedEvent(newState, oldState, hasOldState);
    }
  }

  /// <summary>
  /// Generated system that detects UIBattleState changes and queues UI events.
  /// Generated for namespace: ECSReact.Samples.BattleSystem
  /// </summary>
  [UINotificationSystem]
  public partial class UIBattleStateChangeNotificationSystem : StateChangeNotificationSystem<UIBattleState>
  {
    protected override UIEvent CreateStateChangeEvent(UIBattleState newState, UIBattleState oldState, bool hasOldState)
    {
      return new UIBattleStateChangedEvent(newState, oldState, hasOldState);
    }
  }

}
