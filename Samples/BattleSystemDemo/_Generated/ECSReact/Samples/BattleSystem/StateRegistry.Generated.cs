// <auto-generated>
// This file was automatically generated by StateRegistryGenerator
// Namespace: ECSReact.Samples.BattleSystem
// Generated on: 8/10/2025 12:07:59 a.m.
// Do not modify this file manually - your changes will be overwritten
// </auto-generated>

using System;
using System.Collections.Generic;
using System.Linq;
using Unity.Entities;
using Unity.Collections;
using UnityEngine;
using ECSReact.Core;
using ECSReact.Samples.BattleSystem;

namespace ECSReact.Samples.BattleSystem
{
  /// <summary>
  /// Auto-generated state registry for ECSReact.Samples.BattleSystem namespace.
  /// Provides strongly-typed access to all game states in this namespace.
  /// </summary>
  public class ECSReactSamplesBattleSystemStateRegistry : IStateRegistry
  {
    private static ECSReactSamplesBattleSystemStateRegistry _instance;
    private static readonly object _lock = new object();

    /// <summary>
    /// Singleton instance of the registry.
    /// </summary>
    public static ECSReactSamplesBattleSystemStateRegistry Instance {
      get {
        if (_instance == null) {
          lock (_lock) {
            if (_instance == null) {
              _instance = new ECSReactSamplesBattleSystemStateRegistry();
              _instance.Initialize();
            }
          }
        }
        return _instance;
      }
    }

    private readonly Dictionary<Type, IStateInfo> stateInfos = new Dictionary<Type, IStateInfo>();

    private void Initialize()
    {
      stateInfos.Add(typeof(AIThinkingState), new StateInfoBase
      {
        Type = typeof(AIThinkingState),
        Name = "AIThinkingState",
        Namespace = "ECSReact.Samples.BattleSystem",
        CreateSingletonFunc = (em, name) => em.CreateSingleton(default(AIThinkingState), name),
        GetComponentFunc = (em, entity) => em.GetComponentData<AIThinkingState>(entity),
        SetComponentAction = (em, entity, data) => em.SetComponentData(entity, (AIThinkingState)data),
        DeserializeJsonFunc = (json) => string.IsNullOrEmpty(json) ? default(AIThinkingState) : JsonUtility.FromJson<AIThinkingState>(json)
      });
      stateInfos.Add(typeof(BattleLogState), new StateInfoBase
      {
        Type = typeof(BattleLogState),
        Name = "BattleLogState",
        Namespace = "ECSReact.Samples.BattleSystem",
        CreateSingletonFunc = (em, name) => em.CreateSingleton(default(BattleLogState), name),
        GetComponentFunc = (em, entity) => em.GetComponentData<BattleLogState>(entity),
        SetComponentAction = (em, entity, data) => em.SetComponentData(entity, (BattleLogState)data),
        DeserializeJsonFunc = (json) => string.IsNullOrEmpty(json) ? default(BattleLogState) : JsonUtility.FromJson<BattleLogState>(json)
      });
      stateInfos.Add(typeof(BattleState), new StateInfoBase
      {
        Type = typeof(BattleState),
        Name = "BattleState",
        Namespace = "ECSReact.Samples.BattleSystem",
        CreateSingletonFunc = (em, name) => em.CreateSingleton(default(BattleState), name),
        GetComponentFunc = (em, entity) => em.GetComponentData<BattleState>(entity),
        SetComponentAction = (em, entity, data) => em.SetComponentData(entity, (BattleState)data),
        DeserializeJsonFunc = (json) => string.IsNullOrEmpty(json) ? default(BattleState) : JsonUtility.FromJson<BattleState>(json)
      });
      stateInfos.Add(typeof(CharacterHealthState), new StateInfoBase
      {
        Type = typeof(CharacterHealthState),
        Name = "CharacterHealthState",
        Namespace = "ECSReact.Samples.BattleSystem",
        CreateSingletonFunc = (em, name) => em.CreateSingleton(default(CharacterHealthState), name),
        GetComponentFunc = (em, entity) => em.GetComponentData<CharacterHealthState>(entity),
        SetComponentAction = (em, entity, data) => em.SetComponentData(entity, (CharacterHealthState)data),
        DeserializeJsonFunc = (json) => string.IsNullOrEmpty(json) ? default(CharacterHealthState) : JsonUtility.FromJson<CharacterHealthState>(json)
      });
      stateInfos.Add(typeof(CharacterManaState), new StateInfoBase
      {
        Type = typeof(CharacterManaState),
        Name = "CharacterManaState",
        Namespace = "ECSReact.Samples.BattleSystem",
        CreateSingletonFunc = (em, name) => em.CreateSingleton(default(CharacterManaState), name),
        GetComponentFunc = (em, entity) => em.GetComponentData<CharacterManaState>(entity),
        SetComponentAction = (em, entity, data) => em.SetComponentData(entity, (CharacterManaState)data),
        DeserializeJsonFunc = (json) => string.IsNullOrEmpty(json) ? default(CharacterManaState) : JsonUtility.FromJson<CharacterManaState>(json)
      });
      stateInfos.Add(typeof(CharacterStatusState), new StateInfoBase
      {
        Type = typeof(CharacterStatusState),
        Name = "CharacterStatusState",
        Namespace = "ECSReact.Samples.BattleSystem",
        CreateSingletonFunc = (em, name) => em.CreateSingleton(default(CharacterStatusState), name),
        GetComponentFunc = (em, entity) => em.GetComponentData<CharacterStatusState>(entity),
        SetComponentAction = (em, entity, data) => em.SetComponentData(entity, (CharacterStatusState)data),
        DeserializeJsonFunc = (json) => string.IsNullOrEmpty(json) ? default(CharacterStatusState) : JsonUtility.FromJson<CharacterStatusState>(json)
      });
      stateInfos.Add(typeof(CharacterIdentityState), new StateInfoBase
      {
        Type = typeof(CharacterIdentityState),
        Name = "CharacterIdentityState",
        Namespace = "ECSReact.Samples.BattleSystem",
        CreateSingletonFunc = (em, name) => em.CreateSingleton(default(CharacterIdentityState), name),
        GetComponentFunc = (em, entity) => em.GetComponentData<CharacterIdentityState>(entity),
        SetComponentAction = (em, entity, data) => em.SetComponentData(entity, (CharacterIdentityState)data),
        DeserializeJsonFunc = (json) => string.IsNullOrEmpty(json) ? default(CharacterIdentityState) : JsonUtility.FromJson<CharacterIdentityState>(json)
      });
      stateInfos.Add(typeof(CharacterRosterState), new StateInfoBase
      {
        Type = typeof(CharacterRosterState),
        Name = "CharacterRosterState",
        Namespace = "ECSReact.Samples.BattleSystem",
        CreateSingletonFunc = (em, name) => em.CreateSingleton(default(CharacterRosterState), name),
        GetComponentFunc = (em, entity) => em.GetComponentData<CharacterRosterState>(entity),
        SetComponentAction = (em, entity, data) => em.SetComponentData(entity, (CharacterRosterState)data),
        DeserializeJsonFunc = (json) => string.IsNullOrEmpty(json) ? default(CharacterRosterState) : JsonUtility.FromJson<CharacterRosterState>(json)
      });
      stateInfos.Add(typeof(SaveState), new StateInfoBase
      {
        Type = typeof(SaveState),
        Name = "SaveState",
        Namespace = "ECSReact.Samples.BattleSystem",
        CreateSingletonFunc = (em, name) => em.CreateSingleton(default(SaveState), name),
        GetComponentFunc = (em, entity) => em.GetComponentData<SaveState>(entity),
        SetComponentAction = (em, entity, data) => em.SetComponentData(entity, (SaveState)data),
        DeserializeJsonFunc = (json) => string.IsNullOrEmpty(json) ? default(SaveState) : JsonUtility.FromJson<SaveState>(json)
      });
      stateInfos.Add(typeof(UIBattleState), new StateInfoBase
      {
        Type = typeof(UIBattleState),
        Name = "UIBattleState",
        Namespace = "ECSReact.Samples.BattleSystem",
        CreateSingletonFunc = (em, name) => em.CreateSingleton(default(UIBattleState), name),
        GetComponentFunc = (em, entity) => em.GetComponentData<UIBattleState>(entity),
        SetComponentAction = (em, entity, data) => em.SetComponentData(entity, (UIBattleState)data),
        DeserializeJsonFunc = (json) => string.IsNullOrEmpty(json) ? default(UIBattleState) : JsonUtility.FromJson<UIBattleState>(json)
      });
    }

    public IReadOnlyDictionary<Type, IStateInfo> AllStates => stateInfos;

    public IStateInfo GetStateInfo(Type type)
    {
      return stateInfos.TryGetValue(type, out var info) ? info : null;
    }

    public Entity CreateStateSingleton(EntityManager entityManager, Type stateType, FixedString64Bytes name)
    {
      var info = GetStateInfo(stateType);
      return info?.CreateSingleton(entityManager, name) ?? Entity.Null;
    }

    public List<Type> GetStatesByNamespace(string namespaceName)
    {
      return stateInfos.Values
        .Where(info => info.Namespace == namespaceName)
        .Select(info => info.Type)
        .ToList();
    }

    public List<string> GetAllNamespaces()
    {
      return stateInfos.Values
        .Select(info => info.Namespace)
        .Distinct()
        .OrderBy(ns => ns)
        .ToList();
    }

    /// <summary>
    /// Ensures the registry is created and registered with StateRegistryService.
    /// Called automatically by Unity's RuntimeInitializeOnLoadMethod.
    /// </summary>
    [RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.AfterAssembliesLoaded)]
    public static void EnsureRegistered()
    {
      var registry = Instance;
      StateRegistryService.RegisterRegistry(registry);
    }
  }
}
