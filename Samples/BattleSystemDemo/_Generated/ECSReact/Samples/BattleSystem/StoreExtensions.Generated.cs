// <auto-generated>
// This file was automatically generated by Store Extensions Generator
// Do not modify this file directly - it will be overwritten
// </auto-generated>

using System;
using Unity.Entities;
using Unity.Mathematics;
using Unity.Collections;
using ECSReact.Core;

namespace ECSReact.Samples.BattleSystem
{
  /// <summary>
  /// Generated extension methods for Store that provide typed action dispatch methods.
  /// These methods eliminate boilerplate and provide IntelliSense support for action parameters.
  /// </summary>
  public static class StoreExtensions
  {
    /// <summary>
    /// Dispatch a AttackAction to the ECS world.
    /// </summary>
    /// <param name="attackerEntity">The attackerEntity value for the action.</param>
    /// <param name="targetEntity">The targetEntity value for the action.</param>
    /// <param name="baseDamage">The baseDamage value for the action.</param>
    /// <param name="isCritical">The isCritical value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool Attack(this Store store, Entity attackerEntity, Entity targetEntity, int baseDamage, bool isCritical)
    {
      if (store == null)
      {
        UnityEngine.Debug.LogError("Store instance is null when dispatching AttackAction");
        return false;
      }

      var action = new AttackAction
      {
        attackerEntity = attackerEntity,
        targetEntity = targetEntity,
        baseDamage = baseDamage,
        isCritical = isCritical,
      };

      store.Dispatch(action);
      return true;
    }

    /// <summary>
    /// Dispatch a AttackAction using the Store singleton instance.
    /// </summary>
    /// <param name="attackerEntity">The attackerEntity value for the action.</param>
    /// <param name="targetEntity">The targetEntity value for the action.</param>
    /// <param name="baseDamage">The baseDamage value for the action.</param>
    /// <param name="isCritical">The isCritical value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool Attack(Entity attackerEntity, Entity targetEntity, int baseDamage, bool isCritical)
    {
      if (Store.Instance == null)
      {
        UnityEngine.Debug.LogError("Store.Instance is null when dispatching AttackAction");
        return false;
      }

      return Store.Instance.Attack(attackerEntity, targetEntity, baseDamage, isCritical);
    }

    /// <summary>
    /// Dispatch a NextTurnAction to the ECS world.
    /// </summary>
    /// <param name="skipAnimation">The skipAnimation value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool NextTurn(this Store store, bool skipAnimation)
    {
      if (store == null)
      {
        UnityEngine.Debug.LogError("Store instance is null when dispatching NextTurnAction");
        return false;
      }

      var action = new NextTurnAction
      {
        skipAnimation = skipAnimation,
      };

      store.Dispatch(action);
      return true;
    }

    /// <summary>
    /// Dispatch a NextTurnAction using the Store singleton instance.
    /// </summary>
    /// <param name="skipAnimation">The skipAnimation value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool NextTurn(bool skipAnimation)
    {
      if (Store.Instance == null)
      {
        UnityEngine.Debug.LogError("Store.Instance is null when dispatching NextTurnAction");
        return false;
      }

      return Store.Instance.NextTurn(skipAnimation);
    }

    /// <summary>
    /// Dispatch a SelectActionTypeAction to the ECS world.
    /// </summary>
    /// <param name="actionType">The actionType value for the action.</param>
    /// <param name="actingCharacter">The actingCharacter value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool SelectActionType(this Store store, ActionType actionType, Entity actingCharacter)
    {
      if (store == null)
      {
        UnityEngine.Debug.LogError("Store instance is null when dispatching SelectActionTypeAction");
        return false;
      }

      var action = new SelectActionTypeAction
      {
        actionType = actionType,
        actingCharacter = actingCharacter,
      };

      store.Dispatch(action);
      return true;
    }

    /// <summary>
    /// Dispatch a SelectActionTypeAction using the Store singleton instance.
    /// </summary>
    /// <param name="actionType">The actionType value for the action.</param>
    /// <param name="actingCharacter">The actingCharacter value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool SelectActionType(ActionType actionType, Entity actingCharacter)
    {
      if (Store.Instance == null)
      {
        UnityEngine.Debug.LogError("Store.Instance is null when dispatching SelectActionTypeAction");
        return false;
      }

      return Store.Instance.SelectActionType(actionType, actingCharacter);
    }

    /// <summary>
    /// Dispatch a SelectTargetAction to the ECS world.
    /// </summary>
    /// <param name="targetEntity">The targetEntity value for the action.</param>
    /// <param name="confirmSelection">The confirmSelection value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool SelectTarget(this Store store, Entity targetEntity, bool confirmSelection)
    {
      if (store == null)
      {
        UnityEngine.Debug.LogError("Store instance is null when dispatching SelectTargetAction");
        return false;
      }

      var action = new SelectTargetAction
      {
        targetEntity = targetEntity,
        confirmSelection = confirmSelection,
      };

      store.Dispatch(action);
      return true;
    }

    /// <summary>
    /// Dispatch a SelectTargetAction using the Store singleton instance.
    /// </summary>
    /// <param name="targetEntity">The targetEntity value for the action.</param>
    /// <param name="confirmSelection">The confirmSelection value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool SelectTarget(Entity targetEntity, bool confirmSelection)
    {
      if (Store.Instance == null)
      {
        UnityEngine.Debug.LogError("Store.Instance is null when dispatching SelectTargetAction");
        return false;
      }

      return Store.Instance.SelectTarget(targetEntity, confirmSelection);
    }

    /// <summary>
    /// Dispatch a SaveBattleAction to the ECS world.
    /// </summary>
    /// <param name="fileName">The fileName value for the action.</param>
    /// <param name="format">The format value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool SaveBattle(this Store store, FixedString128Bytes fileName, SaveFormat format)
    {
      if (store == null)
      {
        UnityEngine.Debug.LogError("Store instance is null when dispatching SaveBattleAction");
        return false;
      }

      var action = new SaveBattleAction
      {
        fileName = fileName,
        format = format,
      };

      store.Dispatch(action);
      return true;
    }

    /// <summary>
    /// Dispatch a SaveBattleAction using the Store singleton instance.
    /// </summary>
    /// <param name="fileName">The fileName value for the action.</param>
    /// <param name="format">The format value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool SaveBattle(FixedString128Bytes fileName, SaveFormat format)
    {
      if (Store.Instance == null)
      {
        UnityEngine.Debug.LogError("Store.Instance is null when dispatching SaveBattleAction");
        return false;
      }

      return Store.Instance.SaveBattle(fileName, format);
    }

    /// <summary>
    /// Dispatch a SaveBattleStartedAction to the ECS world.
    /// </summary>
    /// <param name="fileName">The fileName value for the action.</param>
    /// <param name="timestamp">The timestamp value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool SaveBattleStarted(this Store store, FixedString128Bytes fileName, float timestamp)
    {
      if (store == null)
      {
        UnityEngine.Debug.LogError("Store instance is null when dispatching SaveBattleStartedAction");
        return false;
      }

      var action = new SaveBattleStartedAction
      {
        fileName = fileName,
        timestamp = timestamp,
      };

      store.Dispatch(action);
      return true;
    }

    /// <summary>
    /// Dispatch a SaveBattleStartedAction using the Store singleton instance.
    /// </summary>
    /// <param name="fileName">The fileName value for the action.</param>
    /// <param name="timestamp">The timestamp value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool SaveBattleStarted(FixedString128Bytes fileName, float timestamp)
    {
      if (Store.Instance == null)
      {
        UnityEngine.Debug.LogError("Store.Instance is null when dispatching SaveBattleStartedAction");
        return false;
      }

      return Store.Instance.SaveBattleStarted(fileName, timestamp);
    }

    /// <summary>
    /// Dispatch a SaveBattleCompletedAction to the ECS world.
    /// </summary>
    /// <param name="fileName">The fileName value for the action.</param>
    /// <param name="filePath">The filePath value for the action.</param>
    /// <param name="fileSizeBytes">The fileSizeBytes value for the action.</param>
    /// <param name="duration">The duration value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool SaveBattleCompleted(this Store store, FixedString128Bytes fileName, FixedString512Bytes filePath, Int64 fileSizeBytes, float duration)
    {
      if (store == null)
      {
        UnityEngine.Debug.LogError("Store instance is null when dispatching SaveBattleCompletedAction");
        return false;
      }

      var action = new SaveBattleCompletedAction
      {
        fileName = fileName,
        filePath = filePath,
        fileSizeBytes = fileSizeBytes,
        duration = duration,
      };

      store.Dispatch(action);
      return true;
    }

    /// <summary>
    /// Dispatch a SaveBattleCompletedAction using the Store singleton instance.
    /// </summary>
    /// <param name="fileName">The fileName value for the action.</param>
    /// <param name="filePath">The filePath value for the action.</param>
    /// <param name="fileSizeBytes">The fileSizeBytes value for the action.</param>
    /// <param name="duration">The duration value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool SaveBattleCompleted(FixedString128Bytes fileName, FixedString512Bytes filePath, Int64 fileSizeBytes, float duration)
    {
      if (Store.Instance == null)
      {
        UnityEngine.Debug.LogError("Store.Instance is null when dispatching SaveBattleCompletedAction");
        return false;
      }

      return Store.Instance.SaveBattleCompleted(fileName, filePath, fileSizeBytes, duration);
    }

    /// <summary>
    /// Dispatch a SaveBattleFailedAction to the ECS world.
    /// </summary>
    /// <param name="fileName">The fileName value for the action.</param>
    /// <param name="errorMessage">The errorMessage value for the action.</param>
    /// <param name="errorType">The errorType value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool SaveBattleFailed(this Store store, FixedString128Bytes fileName, FixedString512Bytes errorMessage, SaveErrorType errorType)
    {
      if (store == null)
      {
        UnityEngine.Debug.LogError("Store instance is null when dispatching SaveBattleFailedAction");
        return false;
      }

      var action = new SaveBattleFailedAction
      {
        fileName = fileName,
        errorMessage = errorMessage,
        errorType = errorType,
      };

      store.Dispatch(action);
      return true;
    }

    /// <summary>
    /// Dispatch a SaveBattleFailedAction using the Store singleton instance.
    /// </summary>
    /// <param name="fileName">The fileName value for the action.</param>
    /// <param name="errorMessage">The errorMessage value for the action.</param>
    /// <param name="errorType">The errorType value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool SaveBattleFailed(FixedString128Bytes fileName, FixedString512Bytes errorMessage, SaveErrorType errorType)
    {
      if (Store.Instance == null)
      {
        UnityEngine.Debug.LogError("Store.Instance is null when dispatching SaveBattleFailedAction");
        return false;
      }

      return Store.Instance.SaveBattleFailed(fileName, errorMessage, errorType);
    }

    /// <summary>
    /// Dispatch a BattleLogAction to the ECS world.
    /// </summary>
    /// <param name="logType">The logType value for the action.</param>
    /// <param name="message">The message value for the action.</param>
    /// <param name="sourceEntity">The sourceEntity value for the action.</param>
    /// <param name="targetEntity">The targetEntity value for the action.</param>
    /// <param name="numericValue">The numericValue value for the action.</param>
    /// <param name="timestamp">The timestamp value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool BattleLog(this Store store, LogType logType, FixedString128Bytes message, Entity sourceEntity, Entity targetEntity, int numericValue, float timestamp)
    {
      if (store == null)
      {
        UnityEngine.Debug.LogError("Store instance is null when dispatching BattleLogAction");
        return false;
      }

      var action = new BattleLogAction
      {
        logType = logType,
        message = message,
        sourceEntity = sourceEntity,
        targetEntity = targetEntity,
        numericValue = numericValue,
        timestamp = timestamp,
      };

      store.Dispatch(action);
      return true;
    }

    /// <summary>
    /// Dispatch a BattleLogAction using the Store singleton instance.
    /// </summary>
    /// <param name="logType">The logType value for the action.</param>
    /// <param name="message">The message value for the action.</param>
    /// <param name="sourceEntity">The sourceEntity value for the action.</param>
    /// <param name="targetEntity">The targetEntity value for the action.</param>
    /// <param name="numericValue">The numericValue value for the action.</param>
    /// <param name="timestamp">The timestamp value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool BattleLog(LogType logType, FixedString128Bytes message, Entity sourceEntity, Entity targetEntity, int numericValue, float timestamp)
    {
      if (Store.Instance == null)
      {
        UnityEngine.Debug.LogError("Store.Instance is null when dispatching BattleLogAction");
        return false;
      }

      return Store.Instance.BattleLog(logType, message, sourceEntity, targetEntity, numericValue, timestamp);
    }

    /// <summary>
    /// Dispatch a ClearBattleLogAction to the ECS world.
    /// </summary>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool ClearBattleLog(this Store store)
    {
      if (store == null)
      {
        UnityEngine.Debug.LogError("Store instance is null when dispatching ClearBattleLogAction");
        return false;
      }

      var action = new ClearBattleLogAction
      {
      };

      store.Dispatch(action);
      return true;
    }

    /// <summary>
    /// Dispatch a ClearBattleLogAction using the Store singleton instance.
    /// </summary>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool ClearBattleLog()
    {
      if (Store.Instance == null)
      {
        UnityEngine.Debug.LogError("Store.Instance is null when dispatching ClearBattleLogAction");
        return false;
      }

      return Store.Instance.ClearBattleLog();
    }

    /// <summary>
    /// Dispatch a ClearSaveErrorAction to the ECS world.
    /// </summary>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool ClearSaveError(this Store store)
    {
      if (store == null)
      {
        UnityEngine.Debug.LogError("Store instance is null when dispatching ClearSaveErrorAction");
        return false;
      }

      var action = new ClearSaveErrorAction
      {
      };

      store.Dispatch(action);
      return true;
    }

    /// <summary>
    /// Dispatch a ClearSaveErrorAction using the Store singleton instance.
    /// </summary>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool ClearSaveError()
    {
      if (Store.Instance == null)
      {
        UnityEngine.Debug.LogError("Store.Instance is null when dispatching ClearSaveErrorAction");
        return false;
      }

      return Store.Instance.ClearSaveError();
    }

    /// <summary>
    /// Dispatch a SelectSkillAction to the ECS world.
    /// </summary>
    /// <param name="skillId">The skillId value for the action.</param>
    /// <param name="actingCharacter">The actingCharacter value for the action.</param>
    /// <param name="targetRequired">The targetRequired value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool SelectSkill(this Store store, int skillId, Entity actingCharacter, bool targetRequired)
    {
      if (store == null)
      {
        UnityEngine.Debug.LogError("Store instance is null when dispatching SelectSkillAction");
        return false;
      }

      var action = new SelectSkillAction
      {
        skillId = skillId,
        actingCharacter = actingCharacter,
        targetRequired = targetRequired,
      };

      store.Dispatch(action);
      return true;
    }

    /// <summary>
    /// Dispatch a SelectSkillAction using the Store singleton instance.
    /// </summary>
    /// <param name="skillId">The skillId value for the action.</param>
    /// <param name="actingCharacter">The actingCharacter value for the action.</param>
    /// <param name="targetRequired">The targetRequired value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool SelectSkill(int skillId, Entity actingCharacter, bool targetRequired)
    {
      if (Store.Instance == null)
      {
        UnityEngine.Debug.LogError("Store.Instance is null when dispatching SelectSkillAction");
        return false;
      }

      return Store.Instance.SelectSkill(skillId, actingCharacter, targetRequired);
    }

    /// <summary>
    /// Dispatch a ShowTargetingAction to the ECS world.
    /// </summary>
    /// <param name="actionType">The actionType value for the action.</param>
    /// <param name="allowMultiTarget">The allowMultiTarget value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool ShowTargeting(this Store store, ActionType actionType, bool allowMultiTarget)
    {
      if (store == null)
      {
        UnityEngine.Debug.LogError("Store instance is null when dispatching ShowTargetingAction");
        return false;
      }

      var action = new ShowTargetingAction
      {
        actionType = actionType,
        allowMultiTarget = allowMultiTarget,
      };

      store.Dispatch(action);
      return true;
    }

    /// <summary>
    /// Dispatch a ShowTargetingAction using the Store singleton instance.
    /// </summary>
    /// <param name="actionType">The actionType value for the action.</param>
    /// <param name="allowMultiTarget">The allowMultiTarget value for the action.</param>
    /// <returns>True if the action was dispatched successfully, false if Store instance is not available.</returns>
    public static bool ShowTargeting(ActionType actionType, bool allowMultiTarget)
    {
      if (Store.Instance == null)
      {
        UnityEngine.Debug.LogError("Store.Instance is null when dispatching ShowTargetingAction");
        return false;
      }

      return Store.Instance.ShowTargeting(actionType, allowMultiTarget);
    }

  }
}
