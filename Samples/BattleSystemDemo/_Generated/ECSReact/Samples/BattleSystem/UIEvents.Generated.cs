// <auto-generated>
// This file was automatically generated by UIStateNotifier Generator
// Namespace: ECSReact.Samples.BattleSystem
// Do not modify this file directly - it will be overwritten
// </auto-generated>

using ECSReact.Core;
using ECSReact.Samples.BattleSystem;

namespace ECSReact.Samples.BattleSystem
{
  /// <summary>
  /// UI event fired when BattleLogState from ECSReact.Samples.BattleSystem changes.
  /// </summary>
  public class BattleLogStateChangedEvent : UIEvent
  {
    public BattleLogState newState;
    public BattleLogState oldState;
    public bool hasOldState;

    public BattleLogStateChangedEvent(BattleLogState newState, BattleLogState oldState, bool hasOldState)
    {
      this.newState = newState;
      this.oldState = oldState;
      this.hasOldState = hasOldState;
      this.priority = UIEventPriority.Normal;
    }
  }

  /// <summary>
  /// UI event fired when BattleState from ECSReact.Samples.BattleSystem changes.
  /// </summary>
  public class BattleStateChangedEvent : UIEvent
  {
    public BattleState newState;
    public BattleState oldState;
    public bool hasOldState;

    public BattleStateChangedEvent(BattleState newState, BattleState oldState, bool hasOldState)
    {
      this.newState = newState;
      this.oldState = oldState;
      this.hasOldState = hasOldState;
      this.priority = UIEventPriority.Normal;
    }
  }

  /// <summary>
  /// UI event fired when PartyState from ECSReact.Samples.BattleSystem changes.
  /// </summary>
  public class PartyStateChangedEvent : UIEvent
  {
    public PartyState newState;
    public PartyState oldState;
    public bool hasOldState;

    public PartyStateChangedEvent(PartyState newState, PartyState oldState, bool hasOldState)
    {
      this.newState = newState;
      this.oldState = oldState;
      this.hasOldState = hasOldState;
      this.priority = UIEventPriority.Normal;
    }
  }

  /// <summary>
  /// UI event fired when SaveState from ECSReact.Samples.BattleSystem changes.
  /// </summary>
  public class SaveStateChangedEvent : UIEvent
  {
    public SaveState newState;
    public SaveState oldState;
    public bool hasOldState;

    public SaveStateChangedEvent(SaveState newState, SaveState oldState, bool hasOldState)
    {
      this.newState = newState;
      this.oldState = oldState;
      this.hasOldState = hasOldState;
      this.priority = UIEventPriority.Normal;
    }
  }

  /// <summary>
  /// UI event fired when UIBattleState from ECSReact.Samples.BattleSystem changes.
  /// </summary>
  public class UIBattleStateChangedEvent : UIEvent
  {
    public UIBattleState newState;
    public UIBattleState oldState;
    public bool hasOldState;

    public UIBattleStateChangedEvent(UIBattleState newState, UIBattleState oldState, bool hasOldState)
    {
      this.newState = newState;
      this.oldState = oldState;
      this.hasOldState = hasOldState;
      this.priority = UIEventPriority.Normal;
    }
  }
}
