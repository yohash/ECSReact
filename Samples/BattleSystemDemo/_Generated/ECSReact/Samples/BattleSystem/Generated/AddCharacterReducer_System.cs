// <auto-generated>
// Generated by ECSReact ISystem Bridge Generator
// Source: AddCharacterReducer
// Type: Sequential Reducer
// Generated at: 2025-09-30 21:52:23
// Do not modify this file directly - changes will be lost on regeneration
// </auto-generated>

using Unity.Entities;
using Unity.Burst;
using Unity.Collections;
using Unity.Jobs;
using ECSReact.Core;
using ECSReact.Samples.BattleSystem;

namespace ECSReact.Samples.BattleSystem.Generated
{
  /// <summary>
  /// Auto-generated ISystem for AddCharacterReducer reducer.
  /// Processes AddCharacterAction actions to modify PartyState.
  /// Sequential processing with full SystemAPI access.
  /// </summary>
  [UpdateInGroup(typeof(ReducerSystemGroup))]
  public partial struct AddCharacterReducer_System : ISystem
  {
    private AddCharacterReducer logic;
    private EntityQuery actionQuery;

    public void OnCreate(ref SystemState state)
    {
      logic = new AddCharacterReducer();

      // Use EntityQueryBuilder for Burst compatibility
      var queryBuilder = new EntityQueryBuilder(Allocator.Temp)
        .WithAll<AddCharacterAction, ActionTag>();
      actionQuery = state.GetEntityQuery(queryBuilder);
      queryBuilder.Dispose();

      state.RequireForUpdate<PartyState>();
      state.RequireForUpdate(actionQuery);
    }

    public void OnUpdate(ref SystemState state)
    {
      var gameState = SystemAPI.GetSingletonRW<PartyState>();

      // Process all actions sequentially with SystemAPI access
      foreach (var (action, tag) in SystemAPI.Query<RefRO<AddCharacterAction>, RefRO<ActionTag>>())
      {
        logic.Execute(ref gameState.ValueRW, in action.ValueRO, ref state);
      }
    }

    public void OnDestroy(ref SystemState state) { }
  }
}
