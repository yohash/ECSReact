// <auto-generated>
// Generated by ECSReact ISystem Bridge Generator
// Source: DamageReducer
// Type: IParallelReducer
// Generated at: 2025-10-07 00:18:04
// Do not modify this file directly - changes will be lost on regeneration
// </auto-generated>

using Unity.Entities;
using Unity.Burst;
using Unity.Collections;
using ECSReact.Core;
using ECSReact.Samples.BattleSystem;

namespace ECSReact.Samples.BattleSystem
{
  /// <summary>
  /// Generated ISystem implementation for DamageReducer.
  /// Type: IParallelReducer
  /// State: PartyState, Action: AttackAction
  /// Data: DamageReducer.Data
  /// </summary>
  [UpdateInGroup(typeof(ReducerSystemGroup))]
  [BurstCompile]
  public partial struct DamageReducer_System : ISystem
  {
    private DamageReducer logic;
    private EntityQuery actionQuery;
    private DamageReducer.Data preparedData;

    [BurstCompile]
    public void OnCreate(ref SystemState state)
    {
      logic = new DamageReducer();

      // Use EntityQueryBuilder for Burst compatibility
      var queryBuilder = new EntityQueryBuilder(Allocator.Temp)
        .WithAll<AttackAction, ActionTag>();
      actionQuery = state.GetEntityQuery(queryBuilder);
      queryBuilder.Dispose();

      state.RequireForUpdate<PartyState>();
      state.RequireForUpdate(actionQuery);
    }

    [BurstCompile]
    public void OnUpdate(ref SystemState state)
    {
      var gameState = SystemAPI.GetSingletonRW<PartyState>();

      // Prepare data from SystemAPI on main thread
      preparedData = logic.PrepareData(ref state);

      // Schedule parallel job with prepared data
      state.Dependency = new ProcessActionsJob
      {
        State = gameState,
        Logic = logic,
        Data = preparedData
      }.ScheduleParallel(actionQuery, state.Dependency);
    }

    [BurstCompile]
    private partial struct ProcessActionsJob : IJobEntity
    {
      public RefRW<PartyState> State;
      [ReadOnly] public DamageReducer Logic;
      [ReadOnly] public DamageReducer.Data Data;

      public void Execute(in AttackAction action, in ActionTag tag)
      {
        // Parallel execution with prepared data
        Logic.Execute(ref State.ValueRW, in action, in Data);
      }
    }
  }
}
