// <auto-generated>
// Generated by ECSReact ISystem Bridge Generator
// Source: AttackLoggingMiddleware
// Type: Sequential Middleware
// Generated at: 2025-09-30 21:52:23
// Do not modify this file directly - changes will be lost on regeneration
// </auto-generated>

using Unity.Entities;
using Unity.Burst;
using Unity.Collections;
using Unity.Jobs;
using ECSReact.Core;
using ECSReact.Samples.BattleSystem;

namespace ECSReact.Samples.BattleSystem.Generated
{
  /// <summary>
  /// Auto-generated ISystem for AttackLoggingMiddleware middleware.
  /// Processes AttackAction actions before they reach reducers.
  /// Sequential processing with full SystemAPI access.
  /// Can filter actions by returning false from Process().
  /// 
  /// NOTE: Burst disabled for managed operations (dispatching, logging, etc.)
  /// For parallel dispatch from jobs, use ECB.DispatchAction() extension instead.
  /// </summary>
  [UpdateInGroup(typeof(MiddlewareSystemGroup))]
  public partial struct AttackLoggingMiddleware_System : ISystem
  {
    private AttackLoggingMiddleware logic;
    private EntityQuery actionQuery;

    public void OnCreate(ref SystemState state)
    {
      logic = new AttackLoggingMiddleware();

      // Use EntityQueryBuilder for Burst compatibility
      var queryBuilder = new EntityQueryBuilder(Allocator.Temp)
        .WithAllRW<AttackAction>()
        .WithAll<ActionTag>();
      actionQuery = state.GetEntityQuery(queryBuilder);
      queryBuilder.Dispose();

      state.RequireForUpdate(actionQuery);
    }

    public void OnUpdate(ref SystemState state)
    {
      // Process actions sequentially with filtering capability
      var ecb = new EntityCommandBuffer(Allocator.TempJob);

      foreach (var (action, entity) in SystemAPI.Query<RefRW<AttackAction>>()
        .WithAll<ActionTag>().WithEntityAccess())
      {
        // Process returns false to filter out the action
        if (!logic.Process(ref action.ValueRW, ref state))
        {
          ecb.DestroyEntity(entity);
        }
      }

      ecb.Playback(state.EntityManager);
      ecb.Dispose();
    }

    public void OnDestroy(ref SystemState state) { }
  }
}
